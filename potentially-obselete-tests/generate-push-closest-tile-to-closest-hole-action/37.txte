; Tests that the 'generate-push-closest-tile-to-closest-hole' procedure specifies the correct object to be actioned and
; a valid action pattern when the tile closest to the closest hole to the calling turtle is:
; - Adjacent to the calling turtle
; - North of the calling turtle
; - West of the closest hole

;Everything in reality must be in the mind's eye scene so deliberation can occur properly so, add 'minds-eye-access-time', the number of objects in the scene (including the calling turtle) and the number of empty squares in the scene multipled by their relevant placement values. This is the time taken to complete minds-eye instantiation.

<run>create-chrest-turtles 1</run>

tile-lifespan
500000

hole-lifespan
50000

tile-birth-prob
0.1

hole-birth-prob
0.1

reward-value
1.0

tile-born-every
1000

hole-born-every
1000

action-performance-time
0:1000

action-selection-procedure
0:roulette-selection

add-link-time
0:10000

discount-rate
0:0.5

discrimination-time
0:10000

familiarisation-time
0:2000

max-length-of-episodic-memory
0:30

minds-eye-access-time
0:100

minds-eye-empty-square-placement-time
0:10

minds-eye-object-movement-time
0:50

minds-eye-object-placement-time
0:25

minds-eye-recognised-object-lifespan
0:10000

minds-eye-unrecognised-object-lifespan
0:50000

number-fixations
0:4

pattern-recognition?
0:true

play-time
0:14400000

reinforce-actions?
0:true

reinforce-problem-solving?
0:true

reinforcement-learning-theory
0:profit_sharing_with_discount_rate

sight-radius
0:2

time-taken-to-act-randomly
0:500

time-taken-to-use-pattern-recognition
0:200

time-taken-to-problem-solve
0:1000

training-time
0:0

visually-informed-problem-solving?
0:true

<test>
	create-tiles 1 [setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) + 1 ) ]
	create-holes 1 [setxy ( ([pxcor] of turtle 0) + 1 ) ( ([pycor] of turtle 0) + 1 ) ]

	let expected-action-patterns (list 
		(chrest:create-item-square-pattern (move-around-tile-token) (90) (1))
		(chrest:create-item-square-pattern (move-around-tile-token) (270) (1)) 
	)

	ask turtle 0 [
		instantiate-minds-eye
		
		let number-patches-seen ((sight-radius * sight-radius) + 1) ^ 2
		let number-objects-seen (count turtles)

		let scene ( chrest:get-minds-eye-scene (minds-eye-access-time + (number-objects-seen * minds-eye-object-placement-time) + ((number-patches-seen - number-objects-seen) * minds-eye-empty-square-placement-time)) )

		repeat 10 [		
			let result ( deliberate (scene))
			let action-pattern (item (0) (result))
			check-test-output
			( chrest:get-item-square-pattern-as-string (action-pattern) ) 
			( map ([chrest:get-item-square-pattern-as-string (?)]) ( expected-action-patterns ) )
		]
	]
</test>