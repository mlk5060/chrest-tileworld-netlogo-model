;==============================
;========== TEST AIM ==========
;==============================
;
; To determine if the "perform-action" procedure behaves as expected for 
; CHREST turtles when every possible combination of parameters that controls 
; access through the CHREST turtle section of the procedure is tested.
;
;======================================
;========== TEST DESCRIPTION ==========
;====================================== 
; 
; There are 3 parameters that control access through the CHREST turtle section 
; of the "generate-plan" procedure and each parameter can be set to a varying 
; number of values. These parameters can be combined in a number of ways 
; producing a large number of different scenarios that can be tested.  The 
; parameters are listed below with their possible values nested beneath:
; 
; - Action performed
;   ~ Move action
;   ~ Move randomly action
;   ~ Push tile action
;
; - Is there a hole avaialble to push a tile into?
;   ~ True
;   ~ False
;
; - Outcome of performing action
;   ~ Success
;   ~ Failure
;
; The test will only end when all combinations of each parameter value have been 
; set and the "perform-action" procedure called with the parameter values set. 
;
; Parameter setting is performed by randomly combining the potential values for 
; each parameter (avoids human error and programming effort by manually setting 
; each parameter value for each scenario).  If the combination of parameter values 
; has already been tested, a new combination is generated.  This will continue until 
; the parameter values set have not occurred before in the test.
;
; NOTE: The action performed will always have a heading of 0 (due north) and number of patches = 1.
; 
;=====================================
;========== TESTS PERFORMED ==========
;=====================================
;
; The success of action performance is checked after each invocation of the procedure.
; 
<test>
	let scenarios-tested []
	let number-perform-action-repetitions (200)
	let number-scenarios (
		(length (possible-actions)) *
		(2 ^ 2)
	)

	while[length scenarios-tested < number-scenarios][

		;====================;
		;== SETUP SCENARIO ==;
		;====================;

		let action 										(one-of (possible-actions))
		let hole-available                              (one-of (list (true) (false)))
		let action-performed-successfully? 				(one-of (list (true) (false)))

		let scenario (word 
			action " "
			hole-available " "
			action-performed-successfully?
		)

		while[member? scenario scenarios-tested][
			set action 										(one-of (possible-actions))
			set hole-available                              (one-of (list (true) (false)))
			set action-performed-successfully? 				(one-of (list (true) (false)))
			
			set scenario (word 
				action " "
				hole-available " "
				action-performed-successfully?
			)
		]

		set scenarios-tested (lput 
			(scenario)
			(scenarios-tested)
		)

		;=========================;
		;== SETUP CHREST TURTLE ==;
		;=========================;

		create-chrest-turtles 1[
			set can-plan? (false)
			set can-use-pattern-recognition? (true)
			set max-fixations-in-set (10)
			set initial-fixation-threshold (3)
			set peripheral-item-fixation-max-attempts (3)
			set play-time (14400000.0)
			set probability-of-using-problem-solving (0.0)
			set reinforcement-learning-theory ("profit_sharing_with_discount_rate")
			set recognised-visual-spatial-field-object-lifespan (0)
			set time-to-access-visual-spatial-field (0)
			set time-to-encode-recognised-scene-object-as-visual-spatial-field-object (0)
			set time-to-encode-unrecognised-empty-square-scene-object-as-visual-spatial-field-object (0)
			set time-to-encode-unrecognised-non-empty-square-scene-object-as-visual-spatial-field-object (0)
			set time-to-move-visual-spatial-field-object (0)
			set time-to-process-unrecognised-scene-object-during-visual-spatial-field-construction (0)
			set time-to-retrieve-item-from-stm (50)
			set unrecognised-visual-spatial-field-object-lifespan (0)
		]
		setup(true)

		;=========================;
		;== SET EXPECTED VALUES ==;
		;=========================;

		let expected-success-of-action-performance (action-performed-successfully?)

		; If the action is to push a tile then the "perform-action" procedure will report a list since that is what 
		; is reported by the "push-tile" procedure when invoked.  The list will contain two elements, the first states 
		; whether the action was performed successfully or not and its expected value is dependent on the value of the 
		; 'action-performed-successfully?' scenario parameter.  The second element stipulates whether a hole was filled 
		; when a tile was pushed.  This value is dependent first on the value of the "action-performed-successfully?"
		; scenario paramater then the value of the "hole-available" scenario parameter.  If the 
		; "action-performed-successfully?" parameter is set to 'true' then the tile may be pushed and may/may not be
		; pushed into a hole.  If the "action-performed-successfully?" parameter is set to 'false' then a hole will
		; never be filled.
		if (action = push-tile-token)[
			ifelse (action-performed-successfully?)[
				set expected-success-of-action-performance (list (true) (hole-available))
			]
			[
				set expected-success-of-action-performance (list (false) (false))
			]
		]

		;===================================================;
		;== MODIFY CHREST TURTLE'S OBSERVABLE ENVIRONMENT ==;
		;===================================================;

		; If the action should be performed successfully then, since most actions are simple movements of the CHREST turtle 1 patch north, 
		; the patch ahead of the CHREST turtle should not contain any other turtles (holes/tiles/opponents) so don't add any turtles.
		; If the action is to push a tile then things are a little more complex:
		;
		; - If the scenario stipulates that the action should be performed successfully then add a tile.
		; - If the scenario also stipulates that a hole should be available, create a hole in front of the tile otherwise, the action won't
		;   actually be performed successfully.
		if(
			action = push-tile-token and 
			action-performed-successfully?
		)[
			create-tiles 1 [setxy ([pxcor] of turtle 0) (([pycor] of turtle 0) + 1)]

			if(hole-available)[
				create-holes 1 [setxy ([pxcor] of turtle 0) (([pycor] of turtle 0) + 2)]
			]
		]

		if(
			action != push-tile-token and not action-performed-successfully?
		)[
			create-tiles 1 [setxy ([pxcor] of turtle 0) (([pycor] of turtle 0) + 1)]
		]

		;===================;
		;== PERFORM TEST  ==;
		;===================;

		ask turtle 0 [

			; Get the current location of the CHREST turtle and store it so that its position can be reset after every "perform-action"
			; procedure invocation.  This ensures that the CHREST turtle will/will not perform the action successfully (depending upon
			; relevant scenario parameters).
			let turtle-0-original-location (list xcor ycor)

			let scenario-description (word "during the following scenario:\n"
			    "1. Action performed = " action "\n"
			    "2. Hole available = " hole-available "\n"
			    "3. Action performed successfully = " action-performed-successfully?
		    )

		    ;======================================;
		    ;== "PERFORM-ACTION" INVOCATION LOOP ==;
		    ;======================================;

			repeat 50[

				let action-performance-success (perform-action (list (action) (0) (1)))

				;================================================;
				;== CHECK FOR UN/SUCCESSFUL ACTION PERFORMANCE ==;
				;================================================;

				check-equal 
					(action-performance-success) 
					(expected-success-of-action-performance) 
					(word "when checking if the action is performed successfully " scenario-description)

				;===========================;
				;== RESET TURTLE LOCATION ==;
				;===========================;

				setxy (item (0) (turtle-0-original-location)) (item (1) (turtle-0-original-location))
				ask tiles [die]
				ask holes [die]

				if(action = push-tile-token and action-performed-successfully?)[
					ask patch-at-heading-and-distance (0) (1) [sprout-tiles 1]

					if(hole-available)[
						ask patch-at-heading-and-distance (0) (2) [sprout-holes 1]
					]
				]

				if(action != push-tile-token and not action-performed-successfully?)[
					ask patch-at-heading-and-distance (0) (1) [sprout-tiles 1]
				]
			]
		]
		
		reset (true)
	]
</test>