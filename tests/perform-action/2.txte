;Given a situation where:
;
; - Calling turtle's breed is 'chrest-turtles'.
; - Every action in global 'possible actions' list is checked and can not be performed successfully (except 'remain-stationary' which never 
;   fails).
;
;This tests that the following conditions are true for each action performed: 
;
; - Boolean false is reported by the 'perform-action' procedure after every call except when the action is 'remain-stationary' in which case
;   boolean true should be reported.
; - The length of the turtle's 'episodic-memory' is always 0 after every call to 'perform-action' procedure except when the action is 
;   'remain-stationary' in which case it should be 1.
; - Not interested as to the correctness of a turtle's 'episodic-memory' contents since this is checked in another test.

<test>
	foreach(possible-actions)[

		;Need to setup here since the CHREST turtle needs to be reset after every action checked otherwise checks of episodic memory length
		;and number of LTM visual-action links will become ambiguous.
		reset (true)
		create-chrest-turtles 1[
			set add-link-time (10000)
			set discrimination-time (10000)
			set episodic-memory ([])
			set familiarisation-time (2000)
			set max-length-of-episodic-memory (30000)
			set minds-eye-object-movement-time (25)
			set number-fixations (4)
			set play-time (14400000.0)
			set reinforce-actions? (true)
			set reinforce-problem-solving? (true)
			set reinforcement-learning-theory ("profit_sharing_with_discount_rate")
			set sight-radius (2)
			setup-chrest-turtles(true)
		]

		;If the action is not a 'push-tile' action, create a hole immediately ahead of the calling turtle along the heading to move
		;along so that the action is unsuccessful.  If the action is a 'push-tile' action, there will not be a tile ahead of the
		;calling turtle and the action will fail.
		if(? != push-tile-token)[
			create-holes 1 [setxy ([pxcor] of turtle 0) ( ([pycor] of turtle 0) + 1 ) ]
		]

		ask turtle 0[
			let heading-value (0)

			let result ( perform-action ( list (chrest:create-item-square-pattern (?) (heading-value) (1) ) (false) ) )
			
			ifelse(? = remain-stationary-token)[
				check-equal (result) (true)
				check-equal (length episodic-memory) (1)
			]
			[
				check-equal (result) (false)
				check-equal (length episodic-memory) (0)
			]
			
		]
	]
</test>