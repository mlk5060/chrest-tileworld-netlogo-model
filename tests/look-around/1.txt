;Given a scene where the calling turtle is immediately surrounded by various objects that are hidden and not hidden, is the correct list 
;created when the 'look-around' procedure is called?  Note, the colouring of patches isn't tested since if this were not working correctly,
;it would be immediately obvious by looking at the world display.  Note also that the result is visually flipped (vertical) i.e. vision goes
;from bottom -> top but the list looks like the bottom is the top and the top is the bottom.

<run>create-chrest-turtles 1</run>

reward-value
1.0

action-performance-time
0:10000

action-selection-procedure
0:roulette-selection

add-link-time
0:10000

discount-rate
0:0.5

discrimination-time
0:10000

familiarisation-time
0:2000

minds-eye-access-time
0:250

minds-eye-lifespan
0:10000

minds-eye-object-movement-time
0:25

minds-eye-object-placement-time
0:50

pattern-recognition?
0:true

play-time
0:14400000.0

problem-solving?
0:true

reinforce-actions?
0:true

reinforce-problem-solving?
0:true

reinforcement-learning-theory
0:profit_sharing_with_discount_rate

sight-radius
0:2

time-taken-to-use-pattern-recognition
0:200

time-taken-to-problem-solve
0:1000

visually-informed-problem-solving?
0:true

<test>
	;Non-hidden turtles
	create-tiles 1 [setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) + 1 )]
	create-holes 1 [setxy ( ([pxcor] of turtle 0) + 1 ) ( ([pycor] of turtle 0) )]
	create-chrest-turtles 1 [setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) - 1 )]
	create-tiles 1 [setxy ( ([pxcor] of turtle 0) - 1 ) ( ([pycor] of turtle 0) )]
	create-holes 1 [setxy ( ([pxcor] of turtle 0) + 1 ) ( ([pycor] of turtle 0) + 1 )]
	create-chrest-turtles 1 [setxy ( ([pxcor] of turtle 0) + 1 ) ( ([pycor] of turtle 0) - 1 )]
	create-chrest-turtles 1 [setxy ( ([pxcor] of turtle 0) - 1 ) ( ([pycor] of turtle 0) - 1 )]
	create-tiles 1 [setxy ( ([pxcor] of turtle 0) - 1 ) ( ([pycor] of turtle 0) + 1 )]

	;Hidden turtle
	create-chrest-turtles 1 [
		setxy ( ([pxcor] of turtle 0) + 1 ) ( ([pycor] of turtle 0) + 2 ) 
		set hidden? true
	] 

	foreach(breeds)[ 
		let num (runresult (word "count(" ? ")")) 
		if(num = 0)[ 
			error (word "Breed '" ? "' is not present in 'look-around' test.")
		] 
	]

	ask turtle 0 [
		
		let expected ( list
			"[. -2 -2]" "[. -2 -1]" "[. -2 0]" "[. -2 1]" "[. -2 2]"
			"[. -1 -2]" (word "[" chrest-turtle-token " -1 -1]") (word "[" chrest-turtle-token " -1 0]") (word "[" chrest-turtle-token " -1 1]") "[. -1 2]"
			"[. 0 -2]" (word "[" tile-token " 0 -1]") (word "[" self-token " 0 0]") (word "[" hole-token " 0 1]") "[. 0 2]"
			"[. 1 -2]" (word "[" tile-token " 1 -1]") (word "[" tile-token " 1 0]") (word "[" hole-token " 1 1]") "[. 1 2]"
			"[. 2 -2]" "[. 2 -1]" "[. 2 0]" "[. 2 1]" "[. 2 2]"
		)

		check-equal (look-around) (expected)
	]
</test>