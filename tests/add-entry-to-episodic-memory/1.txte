; Tests for correct operation by overloading a turtle's episodic memory.
<test>
	create-chrest-turtles 1 [
		set episodic-memory []
		set max-length-of-episodic-memory 6
		let i 0
		while[i < 10][
			ifelse(i <= 4)[
				add-entry-to-episodic-memory (chrest:create-item-square-pattern (hole-token) (i) (i + 1)) (chrest:create-item-square-pattern (move-randomly-token) (180) (1)) (false)
			]
			[
				add-entry-to-episodic-memory (chrest:create-item-square-pattern (tile-token) (i) (i + 1)) (chrest:create-item-square-pattern (push-tile-token) (0) (1)) (true)
			]

			set i (i + 1)
		]

		let last-hole-move-randomly-episode (item (0) (episodic-memory))
		let first-tile-push-tile-episode (item (1) (episodic-memory))

		check-equal (item (0) (last-hole-move-randomly-episode)) (chrest:create-item-square-pattern (hole-token) (4) (5))
		check-equal (item (0) (first-tile-push-tile-episode)) (chrest:create-item-square-pattern (tile-token) (5) (6))

		check-equal (item (1) (last-hole-move-randomly-episode)) (chrest:create-item-square-pattern (move-randomly-token) (180) (1))
		check-equal (item (1) (first-tile-push-tile-episode)) (chrest:create-item-square-pattern (push-tile-token) (0) (1))
		
		check-equal (item (3) (last-hole-move-randomly-episode)) (false)
		check-equal (item (3) (first-tile-push-tile-episode)) (true)
	]
</test>