;==============================
;========== TEST AIM ==========
;==============================
;
; To determine if the procedure operates as expected when the turtle faces every
; possible heading in a given environment.
;
;======================================
;========== TEST DESCRIPTION ==========
;======================================
;
; A CHREST turtle is created and its sight-radius is set to 2 so that it can see 25 patches
; in total.  All other object types that exist in the model are then created around the
; original CHREST turtle whilst some squares remain empty.  
;
; An illustration of the original turtle's observable environment is provided below.  Each object 
; is denoted by its "who" number followed by the type of the object in parenthesis except for empty 
; patches.
;
; LEGEND
; ======
;
; - H: hole
; - O: opponent
; - T: tile
; - S: self
;
;      |------|------|------|------|------|
;   2  |      |      |      |      |      |
;      |------|------|------|------|------|
;   1  |      | 8(O) | 1(T) | 5(O) |      |
;      |------|------|------|------|------|
;   0  |      | 4(T) | 0(S) | 2(O) |      |
;      |------|------|------|------|------|
;  -1  |      | 7(T) | 3(H) | 6(H) |      |
;      |------|------|------|------|------|
;  -2  |      |      |      |      |      |
;      |------|------|------|------|------|
;          
;         -2     -1     0      1      2        SCENE COORDINATES
;
<test>
	create-chrest-turtles 1 [
		set sight-radius 2
	]

	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) + 1 ) ]
	create-chrest-turtles 1 [ setxy ( ([pxcor] of turtle 0) + 1 ) ([pycor] of turtle 0) ]
	create-holes 1 [ setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) - 1 ) ]
	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) - 1 ) ([pycor] of turtle 0) ]
	create-chrest-turtles 1 [ setxy ( ([pxcor] of turtle 0) + 1 ) ( ([pycor] of turtle 0) + 1 ) ]
	create-holes 1 [ setxy ( ([pxcor] of turtle 0) + 1 ) ( ([pycor] of turtle 0) - 1 ) ]
	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) - 1 ) ( ([pycor] of turtle 0) - 1 ) ]
	create-chrest-turtles 1 [ setxy ( ([pxcor] of turtle 0) - 1 ) ( ([pycor] of turtle 0) + 1 ) ]

	foreach(movement-headings)[
		ask turtle 0 [

			set heading (?)
			let expected []

			if(heading = 0)[
				set expected (list
					( list (-2) (-2) ("") (empty-patch-token) )
					( list (-1) (-2) ("") (empty-patch-token) )
					( list (0) (-2) ("") (empty-patch-token) )
					( list (1) (-2) ("") (empty-patch-token) )
					( list (2) (-2) ("") (empty-patch-token) )

					( list (-2) (-1) ("") (empty-patch-token) )
					( list (-1) (-1) ("7") (tile-token) )
					( list (0) (-1) ("3") (hole-token) )
					( list (1) (-1) ("6") (hole-token) )
					( list (2) (-1) ("") (empty-patch-token) )

					( list (-2) (0) ("") (empty-patch-token) )
					( list (-1) (0) ("4") (tile-token) )
					( list (0) (0) ("0") (self-token) )
					( list (1) (0) ("2") (opponent-token) )
					( list (2) (0) ("") (empty-patch-token) )

					( list (-2) (1) ("") (empty-patch-token) )
					( list (-1) (1) ("8") (opponent-token) )
					( list (0) (1) ("1") (tile-token) )
					( list (1) (1) ("5") (opponent-token) )
					( list (2) (1) ("") (empty-patch-token) )

					( list (-2) (2) ("") (empty-patch-token) )
					( list (-1) (2) ("") (empty-patch-token) )
					( list (0) (2) ("") (empty-patch-token) )
					( list (1) (2) ("") (empty-patch-token) )
					( list (2) (2) ("") (empty-patch-token) )
				)
			]

			if(heading = 90)[
				set expected (list
					( list (-2) (-2) ("") (empty-patch-token) )
					( list (-1) (-2) ("") (empty-patch-token) )
					( list (0) (-2) ("") (empty-patch-token) )
					( list (1) (-2) ("") (empty-patch-token) )
					( list (2) (-2) ("") (empty-patch-token) )

					( list (-2) (-1) ("") (empty-patch-token) )
					( list (-1) (-1) ("8") (opponent-token) )
					( list (0) (-1) ("4") (tile-token) )
					( list (1) (-1) ("7") (tile-token) )
					( list (2) (-1) ("") (empty-patch-token) )

					( list (-2) (0) ("") (empty-patch-token) )
					( list (-1) (0) ("1") (tile-token) )
					( list (0) (0) ("0") (self-token) )
					( list (1) (0) ("3") (hole-token) )
					( list (2) (0) ("") (empty-patch-token) )

					( list (-2) (1) ("") (empty-patch-token) )
					( list (-1) (1) ("5") (opponent-token) )
					( list (0) (1) ("2") (opponent-token) )
					( list (1) (1) ("6") (hole-token) )
					( list (2) (1) ("") (empty-patch-token) )
					
					( list (-2) (2) ("") (empty-patch-token) )
					( list (-1) (2) ("") (empty-patch-token) )
					( list (0) (2) ("") (empty-patch-token) )
					( list (1) (2) ("") (empty-patch-token) )
					( list (2) (2) ("") (empty-patch-token) )
				)
			]

			if(heading = 180)[
				set expected (list
					( list (-2) (-2) ("") (empty-patch-token) )
					( list (-1) (-2) ("") (empty-patch-token) )
					( list (0) (-2) ("") (empty-patch-token) )
					( list (1) (-2) ("") (empty-patch-token) )
					( list (2) (-2) ("") (empty-patch-token) )

					( list (-2) (-1) ("") (empty-patch-token) )
					( list (-1) (-1) ("5") (opponent-token) )
					( list (0) (-1) ("1") (tile-token) )
					( list (1) (-1) ("8") (opponent-token) )
					( list (2) (-1) ("") (empty-patch-token) )

					( list (-2) (0) ("") (empty-patch-token) )
					( list (-1) (0) ("2") (opponent-token) )
					( list (0) (0) ("0") (self-token) )
					( list (1) (0) ("4") (tile-token) )
					( list (2) (0) ("") (empty-patch-token) )

					( list (-2) (1) ("") (empty-patch-token) )
					( list (-1) (1) ("6") (hole-token) )
					( list (0) (1) ("3") (hole-token) )
					( list (1) (1) ("7") (tile-token) )
					( list (2) (1) ("") (empty-patch-token) )
					
					( list (-2) (2) ("") (empty-patch-token) )
					( list (-1) (2) ("") (empty-patch-token) )
					( list (0) (2) ("") (empty-patch-token) )
					( list (1) (2) ("") (empty-patch-token) )
					( list (2) (2) ("") (empty-patch-token) )
				)
			]

			if(heading = 270)[
				set expected (list
					( list (-2) (-2) ("") (empty-patch-token) )
					( list (-1) (-2) ("") (empty-patch-token) )
					( list (0) (-2) ("") (empty-patch-token) )
					( list (1) (-2) ("") (empty-patch-token) )
					( list (2) (-2) ("") (empty-patch-token) )

					( list (-2) (-1) ("") (empty-patch-token) )
					( list (-1) (-1) ("6") (hole-token) )
					( list (0) (-1) ("2") (opponent-token) )
					( list (1) (-1) ("5") (opponent-token) )
					( list (2) (-1) ("") (empty-patch-token) )

					( list (-2) (0) ("") (empty-patch-token) )
					( list (-1) (0) ("3") (hole-token) )
					( list (0) (0) ("0") (self-token) )
					( list (1) (0) ("1") (tile-token) )
					( list (2) (0) ("") (empty-patch-token) )

					( list (-2) (1) ("") (empty-patch-token) )
					( list (-1) (1) ("7") (tile-token) )
					( list (0) (1) ("4") (tile-token) )
					( list (1) (1) ("8") (opponent-token) )
					( list (2) (1) ("") (empty-patch-token) )
					
					( list (-2) (2) ("") (empty-patch-token) )
					( list (-1) (2) ("") (empty-patch-token) )
					( list (0) (2) ("") (empty-patch-token) )
					( list (1) (2) ("") (empty-patch-token) )
					( list (2) (2) ("") (empty-patch-token) )
				)
			]

			check-equal (get-observable-environment) (expected) (word "when turtle's heading is " heading)
		]
	]
</test>