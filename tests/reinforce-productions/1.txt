;==============================
;========== TEST AIM ==========
;==============================
;
; To determine if the "reinforce-productions" procedure behaves as expected for CHREST turtles that use every possible combination of variables that 
; controls access through the procedure is tested.
;
; NOTE: the actual values calculated and applied when reinforcing productions is not tested here.  It is assumed that such testing occurs in the CHREST
;       architecture itself since this should be where reinforcement learning theories are specified.  Also note that this test only takes into account
;       a CHREST turtle that uses the "profit_sharing_with_discount_rate" reinforcement learning theory.  If other reinforcement learning theories are
;       tested, they should be added to this test thus increasing the total number of scenarios tested.
;
;======================================
;========== TEST DESCRIPTION ==========
;====================================== 
;
; There are 3 variables that control access through the "reinforce-productions" procedure and each variable can be set to two values. 
; These variables can be combined in up to 8 different ways (2 * 2 * 2) resulting in 8 different scenarios that should be tested.  The 
; variables are listed below with their possible values nested beneath:
;
; - Action in an episode generated using pattern-recognition?
;   ~ True
;   ~ False (in this case, the episode was generated using problem-solving)
;
; - Can the CHREST turtle reinforce explicit actions, e.g. 'push-tile', 'move-around-tile' etc?
;   ~ True
;   ~ False 
;
; - Can the CHREST turtle reinforce the problem-solving action?
;   ~ True
;   ~ False  
; 
; The test is comprised of the 8 scenarios described above and will only end when all combinations of each variable value have been set and the "reinforce-productions"
; procedure is called with the variable values set. The "reinforce-productions" procedure is repeatedly invoked for a set number of times to ensure that, if the scenario 
; parameters are set so that explicit action and problem-solving productions can be reinforced, both production types are reinforced. 
;
; Variable setting is performed by randomly combining the potential values for each variable (avoids human error and programming effort by manually setting each
; variable value for each scenario).  If the combination of variable values has already been tested, a new combination is generated.  This will continue until 
; the variable values set have not occurred before in the test or until all variable value combinations have been tested.
;
; After setting the scenario up, the test proceeds as follows:
;
; 1) A new CHREST turtle is created and its 'reinforce-problem-solving?' and 'reinforce-actions?' turtle variables are set to the values specified in the scenario.
; 2) The CHREST turtle learns a visual-pattern, an explicit action pattern and the problem-solving action and productions are created from the visual-pattern to
;    both of the action patterns mentioned.  The patterns to use in production creation need to be fully committed to LTM otherwise production creation will not
;    occur when requested.
; 3) The CHREST turtle then repeats the following procedure 50 times:
;    a) Its episodic memory is populated with 3 episodes, each of which has its 'generated-using-pattern-recognition?' fragment set accoridng to the scenario.
;    b) The "reinforce-productions" procedure is called.  This will take each episode currently in episodic memory and attempt to identify the production indicated
;       by the visual and action infformation specified in the episode and reinforce it according to the scenario variable values.
;    NOTE: after reinforcing productions, the "reinforce-productions" procedure will clear the CHREST turtle's episodic-memory hence the recreation of the 3 episodes
;          on every repetition.
; 4) The productions created in step 2 are retrieved and their values are checked.
;
;=====================================
;========== TESTS PERFORMED ==========
;=====================================
;
; In step 4 it is mentioned that the values of the productions created are tested.  For each production the tests check that the production's value is either equal 
; to or greater than 0, the test doesn't check the exact values.  This is for two reasons:
;
; 1) In some scenarios, the CHREST turtle may select between reinforcing the problem-solving or explicit action production and the choice as to which one is reinforced
;    on every invocation of "reinforce-productions" is random.
; 2) The "reinforce-productions" procedure is invoked 50 times.
;
; Given this information, it should be obvious that it is not possible to reliably calculate what the value of each production should be following the conclusion of
; step 3 above.  So, to ensure that correct productions are reinforced a simple check is made to see if the relevant production's value is greater than 0.  If the
; production shouldn't have been reinforced in the scenario then its value should equal 0 (all productions are instantiated with 0 as their initial value).
;
; The table below illustrates what the expected value for the problem-solving and explicit action production should be for each scenario.  See the 
; "reinforce-productions" prodcedure code for explanations as to why these values are expected.
;
; NOTE: If the "Pattern-Recognition Generate Episode Action?" variable value is set to "False" then the episode action is assumed to have been created using 
;       problem-solving instead. 
;
;                                                            |-----------------------------------|
;                                                            |     Expected Production Values    |
; |------------------------------|-----------|---------------|-----------------------------------|
; | Pattern-Recognition Generate | Reinf PS? | Reinf Action? | Problem-Solving | Explicit Action |
; | Episode Action?              |           |               |                 |                 |
; |------------------------------|-----------|---------------|-----------------|-----------------|
; | False                        | True      | True          | > 0.0           | > 0.0           |
; |                              |           | False         | > 0.0           | = 0.0           |
; |                              | False     | True          | = 0.0           | > 0.0           |
; |                              |           | False         | = 0.0           | = 0.0           |
; | True                         | True      | True          | = 0.0           | > 0.0           |
; |                              |           | False         | = 0.0           | = 0.0           |
; |                              | False     | True          | = 0.0           | > 0.0           |
; |                              |           | False         | = 0.0           | = 0.0           |
; |------------------------------|-----------|---------------|-----------------------------------|
;
<test>

	let scenarios-tested []
	while [length scenarios-tested < 8][

		;====================;
		;== SCENARIO SETUP ==;
		;====================;

		let episode-generated-using-pattern-recognition? (one-of (list (true) (false)))
		let reinf-prob-sol? (one-of (list (true) (false)))
		let reinf-expl-act? (one-of (list (true) (false)))

		let scenario (word 
			episode-generated-using-pattern-recognition? " " 
			reinf-prob-sol? " " 
			reinf-expl-act?
		)

		while[member? scenario scenarios-tested][
			set episode-generated-using-pattern-recognition? (one-of (list (true) (false)))
			set reinf-prob-sol? (one-of (list (true) (false)))
			set reinf-expl-act? (one-of (list (true) (false)))

			set scenario (word 
				episode-generated-using-pattern-recognition? " " 
				reinf-prob-sol? " " 
				reinf-expl-act?
			)
		]

		set scenarios-tested (lput 
			(scenario)
			(scenarios-tested)
		)

		;==========================;
		;== CREATE CHREST TURTLE ==;
		;==========================;

		create-chrest-turtles 1[
			set action-performance-time (10000)
			set action-selection-procedure ("roulette-selection")
			set add-link-time (10000)
			set can-plan? (true)
			set discount-rate (0.5)
			set discrimination-time (10000)
			set familiarisation-time (2000)
			set max-length-of-episodic-memory (5)
			set max-search-iteration (5)
			set number-fixations (4)
			set pattern-recognition? (true)
			set play-time (14400000.0)
			set reinforce-actions? (reinf-expl-act?)
			set reinforce-problem-solving? (reinf-prob-sol?)
			set reinforcement-learning-theory ("profit_sharing_with_discount_rate")
			set reward-value (1)
			set sight-radius (1)
			set time-taken-to-use-pattern-recognition (200)
			set time-taken-to-problem-solve (1000)
			set visual-spatial-field-access-time (50)
			set visual-spatial-field-empty-square-placement-time (5)
			set visual-spatial-field-object-movement-time (25)
			set visual-spatial-field-object-placement-time (10)
			set visual-spatial-field-recognised-object-lifespan (100000)
			set visual-spatial-field-unrecognised-object-lifespan (90000)
		]
		setup (true)

		ask turtle 0 [

			;======================================================;
			;== CREATE VISUAL AND ACTION PATTERNS FOR PRODUCTION ==;
			;======================================================;

			let visual-pattern (chrest:ListPattern.new ("visual") (list (chrest:ItemSquarePattern.new (tile-token) (0) (1))))
			let explicit-action-pattern (chrest:ListPattern.new ("action") (list (chrest:ItemSquarePattern.new (push-tile-token) (0) (1))))
			let problem-solving-action-pattern (chrest:ListPattern.new ("action") (list (chrest:ItemSquarePattern.new (problem-solving-token) (0) (0))))

			;======================================;
			;== LEARN VISUAL AND ACTION PATTERNS ==;
			;======================================;

			let visual-chunk ""
			while [visual-chunk != chrest:ListPattern.get-as-string (visual-pattern)][
				set visual-chunk (chrest:recognise-and-learn (visual-pattern) (chrest:get-learning-clock))

				if(not is-string? visual-chunk)[
					set visual-chunk (chrest:ListPattern.get-as-string (chrest:Node.get-image (visual-chunk)))
				]
			]

			let action-chunk ""
			while [action-chunk != chrest:ListPattern.get-as-string (explicit-action-pattern)][
				set action-chunk (chrest:recognise-and-learn (explicit-action-pattern) (chrest:get-learning-clock))

				if(not is-string? action-chunk)[
					set action-chunk (chrest:ListPattern.get-as-string (chrest:Node.get-image (action-chunk)))
				]
			]

			set action-chunk ""
			while [action-chunk != chrest:ListPattern.get-as-string (problem-solving-action-pattern)][
				set action-chunk (chrest:recognise-and-learn (problem-solving-action-pattern) (chrest:get-learning-clock))

				if(not is-string? action-chunk)[
					set action-chunk (chrest:ListPattern.get-as-string (chrest:Node.get-image (action-chunk)))
				]
			]

			;========================;
			;== CREATE PRODUCTIONS ==;
			;========================;

			chrest:associate-list-patterns (visual-pattern) (explicit-action-pattern) (chrest:get-learning-clock)
			chrest:associate-list-patterns (visual-pattern) (problem-solving-action-pattern) (chrest:get-learning-clock)

			;========================;
			;== SCENARIO TEST LOOP ==;
			;========================;

			repeat (50)[

				;============================;
				;== CREATE EPISODIC MEMORY ==;
				;============================;

				set current-training-time (chrest:get-learning-clock)

				set episodic-memory (list
					(list 
						(visual-pattern)
						(explicit-action-pattern)
						(current-training-time)
						(episode-generated-using-pattern-recognition?)
					)
					(list 
						(visual-pattern)
						(explicit-action-pattern)
						(current-training-time - 1)
						(episode-generated-using-pattern-recognition?)
					)
					(list 
						(visual-pattern)
						(explicit-action-pattern)
						(current-training-time - 2)
						(episode-generated-using-pattern-recognition?)
					)
				)

				;====================================;
				;== INVOKE 'reinforce-productions' ==;
				;====================================;

				reinforce-productions
			]
			
			;==========;
			;== TEST ==;
			;==========;

			let scenario-description (word "during the following scenario:\n"
			    "1. Episode generated using pattern-recognition? = " episode-generated-using-pattern-recognition? "\n"
			    "2. Reinforce problem solving = " reinf-prob-sol? "\n"
			    "3. Reinforce explicit actions = " reinf-expl-act?
		    )

	        let expected-problem-solving-production-value " = 0.0"
	        let expected-explicit-action-production-value " = 0.0"

			if(reinforce-actions?)[
				set expected-explicit-action-production-value " > 0.0"
			]

			if(not episode-generated-using-pattern-recognition? and reinforce-problem-solving?)[
				set expected-problem-solving-production-value " > 0.0"
			]

			let productions (chrest:Node.get-productions (chrest:recognise (visual-pattern) (report-current-time)))

			foreach (productions)[
				let production-action (chrest:ListPattern.get-as-string (chrest:Node.get-image (item (0) (?))))
				let production-value (item (1) (?))

				ifelse (production-action = chrest:ListPattern.get-as-string (problem-solving-action-pattern))[
					check-equal
						(runresult (word production-value expected-problem-solving-production-value))
						(true)
						(word "occured when checking the value of the problem-solving production " scenario-description)
				]
				[
					check-equal
						(runresult (word production-value expected-explicit-action-production-value))
						(true)
						(word "occured when checking the value of the explicit action production " scenario-description)
				]
			]
		]

		reset (true)
	]
</test>