;==============================
;========== TEST AIM ==========
;==============================
; 
; Checks the state of relevant parameters for a CHREST turtle when 'execute-next-planned-action'
; is invoked by a CHREST turtle and its plan is empty.
;
;======================================
;========== TEST DESCRIPTION ==========
;======================================
;
; A CHREST turtle is set-up and its 'generate-plan?' and 'construct-visual-spatial-field?'
; turtle variables are manually set to 'false'. Its 'episodic-memory' is also populated. 
; The 'execute-next-planned-action' procedure is then invoked.
;
;=====================================
;========== TESTS PERFORMED ==========
;=====================================
;
; Immediately following invocation of 'execute-next-planned-action', the following CHREST 
; turtle variables should be set to the values expected:
;
; - generate-plan?
;   ~ EXPECTED: true
;
; - construct-visual-spatial-field?
;	~ EXPECTED: true
;
; - episodic-memory
;   ~ EXPECTED: []
;
<test>

	;==================================;
	;== CREATE & SETUP CHREST-TURTLE ==;
	;==================================;

	create-chrest-turtles 1 [
		set action-performance-time (10000)
		set action-selection-procedure ("roulette-selection")
		set add-link-time (10000)
		set can-plan? (true)
		set discount-rate (0.5)
		set discrimination-time (10000)
		set familiarisation-time (2000)
		set max-length-of-episodic-memory (5)
		set max-search-iteration (5)
		set number-fixations (4)
		set pattern-recognition? (true)
		set play-time (14400000.0)
		set reinforce-actions? (true)
		set reinforce-problem-solving? (true)
		set reinforcement-learning-theory ("profit_sharing_with_discount_rate") 
		set sight-radius (2)
		set time-taken-to-use-pattern-recognition (200)
		set time-taken-to-problem-solve (1000)
		set visual-spatial-field-access-time (100)
		set visual-spatial-field-empty-square-placement-time (10)
		set visual-spatial-field-object-movement-time (50)
		set visual-spatial-field-object-placement-time (25)
		set visual-spatial-field-recognised-object-lifespan (10000)
		set visual-spatial-field-unrecognised-object-lifespan (50000)
	]
	setup(true)

	ask turtle 0[

		;===========================;
		;== SET VARIABLES TO TEST ==;
		;===========================;

		set generate-plan? (false)
		set construct-visual-spatial-field? (false)
		set episodic-memory (lput ("episode") (episodic-memory))

		;==========================================;
		;== INVOKE 'execute-next-planned-action' ==;
		;==========================================;

		execute-next-planned-action

		;===========;
		;== TESTS ==;
		;===========;

		check-equal 
			(generate-plan?) 
			(true) 
			("when checking 'generate-plan?")

		check-equal 
			(construct-visual-spatial-field?) 
			(true) 
			("when checking 'construct-visual-spatial-field?'")

		check-equal
			(episodic-memory)
			([])
			("when checking 'episodic-memory'")
	]
</test>