;====================
;===== TEST AIM =====
;====================
;
; To ensure that the "generate-action-when-tile-can-be-seen" procedure operates
; as expected given every possible input (within reason).
;
;============================
;===== TEST DESCRIPTION =====
;============================
;
; The "generate-action-when-tile-can-be-seen" is designed to return actions to
; perform when a tile is seen and is either immediately adjacent to a calling
; turtle or not.  To determine if a tile is immediately adjacent to a calling
; turtle or not, the procedure expects two input parameters: the number of 
; patches along the x-axis and y-axis that the tile is from the calling turtle.
; Therefore, to fully test the procedure, values of -2, -1, 0, 1 and 2 are used
; for these input parameters and a combination of these values is termed as a 
; "scenario" in context of this test.
;
; NOTE: a scenario where the first and second parameter input to the procedure
;       are both equal to 0 is not tested since such a scenario is impossible in
;       the standard operation of the model given that this procedure isn't called
;       when a tile and the calling turtle exist on the same patch either in a 
;       CHREST turtle's visual-spatial field or in the model environment.
;
; The test proceeds as follows:
;
; - A CHREST turtle is created.
; - A scenario is generated by randomly combining one of the five values discussed 
;   above for the first and second input parameters that can be passed to 
;   "generate-action-when-tile-can-be-seen".  If this scenario has already been 
;   tested or sets both input parameters to 0 then a new scenario is generated.
; - The input parameter values are checked and the actions expected to be generated
;   are created.
; - The "generate-action-when-tile-can-be-seen" is invoked with the parameters 
;   specified and the output is checked to see if it is contained in the actions
;   expected to be generated.
;
;===========================
;===== TESTS PERFORMED =====
;===========================
;
; See procedure documentation in Netlogo model code for expected output.
;
<test>
	create-chrest-turtles 1
	let xcor-values (list (-2) (-1) (0) (1) (2))
	let ycor-values (list (-2) (-1) (0) (1) (2))
	let scenarios-tested []

	; Exclude the case where xcor-value and ycor-value both = 0.
	while[length scenarios-tested < ((length xcor-values * length ycor-values) - 1)][

		;====================;
		;== SETUP SCENARIO ==;
		;====================;

		let xcor-value (one-of (xcor-values))
		let ycor-value (one-of (ycor-values))
		let scenario (word xcor-value " " ycor-value)

		while[
			(member? scenario scenarios-tested) or 
			(xcor-value = 0 and ycor-value = 0)
		][
			set xcor-value (one-of (xcor-values))
			set ycor-value (one-of (ycor-values))
			set scenario (word xcor-value " " ycor-value)
		]

		set scenarios-tested (lput (scenario) (scenarios-tested))

		ask turtle 0 [

			;==========================;
			;== SET EXPECTED RESULTS ==;
			;==========================;

			let expected-actions-generated []

			 ifelse(
				(xcor-value = 0 and ycor-value = 1) or 
				(xcor-value = 1 and ycor-value = 0) or 
				(xcor-value = 0 and ycor-value = -1) or 
				(xcor-value = -1 and ycor-value = 0) 
			)[
				if(xcor-value = 0 and ycor-value = 1)[
					set expected-actions-generated (lput (list (move-token) (90) (1)) (expected-actions-generated))
		      		set expected-actions-generated (lput (list (move-token) (270) (1)) (expected-actions-generated))
		      		set expected-actions-generated (lput (list (push-tile-token) (0) (1)) (expected-actions-generated))
				]

		    	if(xcor-value = 1 and ycor-value = 0)[
		    		set expected-actions-generated (lput (list (move-token) (0) (1)) (expected-actions-generated))
		      		set expected-actions-generated (lput (list (move-token) (180) (1)) (expected-actions-generated))
		      		set expected-actions-generated (lput (list (push-tile-token) (90) (1)) (expected-actions-generated))
		    	]

		    	if(xcor-value = 0 and ycor-value = -1)[
		    		set expected-actions-generated (lput (list (move-token) (90) (1)) (expected-actions-generated))
		      		set expected-actions-generated (lput (list (move-token) (270) (1)) (expected-actions-generated))
		      		set expected-actions-generated (lput (list (push-tile-token) (180) (1)) (expected-actions-generated))
		    	]

		    	if(xcor-value = -1 and ycor-value = 0)[
		    		set expected-actions-generated (lput (list (move-token) (0) (1)) (expected-actions-generated))
					set expected-actions-generated (lput (list (move-token) (180) (1)) (expected-actions-generated))
					set expected-actions-generated (lput (list (push-tile-token) (270) (1)) (expected-actions-generated))
		    	]
			]
			[
				if(ycor-value > 0)[
					set expected-actions-generated (lput (list (move-token) (0) (1)) (expected-actions-generated))
				]

				if(xcor-value > 0)[
					set expected-actions-generated (lput (list (move-token) (90) (1)) (expected-actions-generated))
				]

				if(ycor-value < 0)[
					set expected-actions-generated (lput (list (move-token) (180) (1)) (expected-actions-generated))
				]

				if(xcor-value < 0)[
					set expected-actions-generated (lput (list (move-token) (270) (1)) (expected-actions-generated))
				]
		    ]

		    ;==========;
		    ;== TEST ==;
		    ;==========;

			let scenario-description (word "When xcor-value = " xcor-value ", ycor-value = " ycor-value)
		    check-equal 
		    	(member? (generate-action-when-tile-can-be-seen (xcor-value) (ycor-value)) (expected-actions-generated))
		    	(true)
		    	(scenario-description)
		]
	]
</test>