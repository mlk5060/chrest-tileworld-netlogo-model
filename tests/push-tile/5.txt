;Given a situation where:
;
; - A turtle calls the 'push-tile' procedure and each value in the global 'movement-headings' variable is passed.
; - There is a tile adjacent to the turtle along the heading specified.
; - There is a hole adjacent to the tile along the heading specified.
;
;This tests to see if the following conditions are true:
; 
; - The 'push-tile' procedure reports boolean 'true' for each heading specified with respect to whether the action was performed 
;   successfully.
; - The 'push-tile' procedure reports boolean 'false' for each heading specified with respect to whether a hole was filled.
; - The calling turtle is located on the patch that is 1 patch along from its original location along the heading specified.
; - The tile and hole are no longer visible in the environment.
; - The calling turtle's score is equal to 1.

<run>create-chrest-turtles 1</run>

reward-value
1.0

action-performance-time
0:10000

action-selection-procedure
0:roulette-selection

add-link-time
0:10000

discount-rate
0:0.5

discrimination-time
0:10000

familiarisation-time
0:2000

max-length-of-episodic-memory
0:30000

minds-eye-access-time
0:100

minds-eye-empty-square-placement-time
0:10

minds-eye-object-movement-time
0:50

minds-eye-object-placement-time
0:25

minds-eye-recognised-object-lifespan
0:10000

minds-eye-unrecognised-object-lifespan
0:50000

number-fixations
0:4

pattern-recognition?
0:true

play-time
0:14400000.0

reinforce-actions?
0:false

reinforce-problem-solving?
0:false

reinforcement-learning-theory
0:profit_sharing_with_discount_rate

sight-radius
0:2

time-taken-to-use-pattern-recognition
0:200

time-taken-to-problem-solve
0:1000

<test>
	foreach(movement-headings)[

		let chrest-turtles-new-patch 0

		if(? = 0)[
			create-tiles 1 [ setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) + 1 ) ]
			create-holes 1 [ setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) + 2 ) ]
		]

		if(? = 90)[
			create-tiles 1 [ setxy ( ([pxcor] of turtle 0) + 1 ) ( ([pycor] of turtle 0) ) ]
			create-holes 1 [ setxy ( ([pxcor] of turtle 0) + 2 ) ( ([pycor] of turtle 0) ) ]
		]

		if(? = 180)[
			create-tiles 1 [ setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) - 1 ) ]
			create-holes 1 [ setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) - 2 ) ]
		]

		if(? = 270)[
			create-tiles 1 [ setxy ( ([pxcor] of turtle 0) - 1 ) ( ([pycor] of turtle 0) ) ]
			create-holes 1 [ setxy ( ([pxcor] of turtle 0) - 2 ) ( ([pycor] of turtle 0) ) ]
		]

		ask turtle 0 [
			set chrest-turtles-new-patch (patch-at-heading-and-distance (?) (1))

			check-equal (push-tile (?)) ( list (true) (true) )
			check-equal (patch-here) (chrest-turtles-new-patch)
			check-equal (score) (1)
			check-equal ( (count (tiles)) + (count (holes)) ) (0)

			set score 0
			set episodic-memory []
		]
	]
</test>