;==============================
;========== TEST AIM ==========
;==============================
;
; To determine if the "push-tile" procedure generates the expected output if
; a player turtle, P, runs the "push-tile" procedure and a tile exists on the 
; patch immediately ahead of the player turtle along the heading passed to the 
; "push-tile" procedure.
;
;======================================
;========== TEST DESCRIPTION ==========
;====================================== 
;
; - A player turtle is created.
; - For each value in the global 'movement-headings' list:
;   ~ A tile is created immediately ahead of the player turtle along the heading 
;     specified.
;   ~ The player turtle invokes the "push-tile" procedure and passes the heading
;     specified as input.
;
; NOTE: The tile created is destoyed before a new 'movement-headings' variable is
;       tested.
;
;=====================================
;========== TESTS PERFORMED ==========
;=====================================
;
; - For each 'movement-headings' value:
;   ~ The result of the "push-tile" procedure is checked:
;     + Boolean true should always be reported with respect to whether the action was 
;       performed successfully.
;     + Boolean false should always be reported with respect to whether a hole was
;       filled as a result of the action being performed.
;
;   ~ The calling turtle is located 1 patch along the heading specified from the patch
;     it was on before the "push-tile" procedure was invoked.
;   ~ The tile is located 1 patch along the heading specified from the patch
;     it was on before the "push-tile" procedure was invoked.
;
<test>
	create-chrest-turtles 1
	let chrest-turtle-new-patch 0
	let tile-new-patch 0

	foreach(movement-headings)[

		if(? = 0)[
			create-tiles 1 [ setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) + 1 ) ]
		]

		if(? = 90)[
			create-tiles 1 [ setxy ( ([pxcor] of turtle 0) + 1 ) ( ([pycor] of turtle 0) ) ]
		]

		if(? = 180)[
			create-tiles 1 [ setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) - 1 ) ]
		]

		if(? = 270)[
			create-tiles 1 [ setxy ( ([pxcor] of turtle 0) - 1 ) ( ([pycor] of turtle 0) ) ]
		]
		
		ask turtle 0 [
			set chrest-turtle-new-patch (patch-at-heading-and-distance (?) (1))
		]

		ask tiles [
			set tile-new-patch (patch-at-heading-and-distance (?) (1))
		]

		ask turtle 0 [
			check-equal 
				(push-tile (?)) 
				( list (true) (false) ) 
				("when checking the output of the 'push-tile' procedure")

			check-equal 
				(patch-here) 
				(chrest-turtle-new-patch) 
				("when checking the location of the 'pusher'")
		]

		ask tiles[
			check-equal 
				(patch-here) 
				(tile-new-patch) 
				("when checking the location of the tile")

			die
		]
	]
</test>