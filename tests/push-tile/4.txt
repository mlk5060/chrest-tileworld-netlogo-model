;==============================
;========== TEST AIM ==========
;==============================
;
; To determine if the "push-tile" procedure generates the expected output if
; a player turtle, P, runs the "push-tile" procedure and a turtle exists 
; 1 patch along the heading that a tile is to be pushed but is hidden.
;
;======================================
;========== TEST DESCRIPTION ==========
;====================================== 
;
; - For each value in the global 'movement-headings' list and for each breed of
;   turtle in the model (including holes):
;   ~ A player turtle, the "pusher", is created.
;   ~ A tile is created immediately ahead of the player turtle along the heading 
;     specified.
;   ~ An instance of the turtle breed specified, the "hider", is created immediately 
;     ahead of the tile along the heading specified and its 'hidden?' turtle variable 
;     is set to 'true'.
;   ~ The pusher invokes the "push-tile" procedure and passes the heading specified 
;     as input.
;
;=====================================
;========== TESTS PERFORMED ==========
;=====================================
;
; - The result of the "push-tile" procedure is checked:
;   ~ Boolean true should always be reported with respect to whether the action was 
;     performed successfully.
;   ~ Boolean false should always be reported with respect to whether a hole was
;     filled as a result of the action being performed.
;
; - The pusher's 'score' turtle variable is still equal to 0.
; - The pusher and tile are located 1 patch along the heading specified from their
;   original locations.
; - The hider is still located on the patch it was originally placed on.
;
<test>
	
	foreach(movement-headings)[
		let heading-specified (?)

		foreach (breeds)[
			let hider-breed (?)

			;====================;
			;== CREATE TURTLES ==;
			;====================;

			create-chrest-turtles 1

			if(heading-specified = 0)[
				create-tiles 1 [ 
					setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) + 1 ) 
				]

				run (word "create-" hider-breed " 1 [ 
					setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) + 2 )
				]")
			]

			if(heading-specified = 90)[
				create-tiles 1 [ 
					setxy ( ([pxcor] of turtle 0) + 1 ) ( ([pycor] of turtle 0) )
				]

				run (word "create-" hider-breed " 1 [ 
					setxy ( ([pxcor] of turtle 0) + 2 ) ( ([pycor] of turtle 0) ) 
				]")
			]

			if(heading-specified = 180)[
				create-tiles 1 [ 
					setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) - 1 )
				]

				run (word "create-" hider-breed " 1 [ 
					setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) - 2 ) 
				]")
			]

			if(heading-specified = 270)[
				create-tiles 1 [ 
					setxy ( ([pxcor] of turtle 0) - 1 ) ( ([pycor] of turtle 0) ) 
				]

				run (word "create-" hider-breed " 1 [ 
					setxy ( ([pxcor] of turtle 0) - 2 ) ( ([pycor] of turtle 0) ) 
				]")
			]

			;======================;
			;== HIDE THE 'HIDER' ==;
			;======================;

			ask turtle 2[
				set hidden? (true)
			]
		
			;============================================;
			;== SET EXPECTED TURTLE LOCATION VARIABLES ==;
			;============================================;

			let pusher-expected-location []
			let tile-expected-location []
			let hider-expected-location []

			ask turtle 0 [
				if (heading-specified = 0)[ set pusher-expected-location ( list ([xcor] of self) (([ycor] of self) + 1) ) ]
				if (heading-specified = 90)[ set pusher-expected-location ( list (([xcor] of self) + 1) ([ycor] of self) ) ]
				if (heading-specified = 180)[ set pusher-expected-location ( list ([xcor] of self) (([ycor] of self) - 1) ) ]
				if (heading-specified = 270)[ set pusher-expected-location ( list (([xcor] of self) - 1) ([ycor] of self) ) ]
			]

			ask turtle 1 [
				if (heading-specified = 0)[ set tile-expected-location ( list ([xcor] of self) (([ycor] of self) + 1) ) ]
				if (heading-specified = 90)[ set tile-expected-location ( list (([xcor] of self) + 1) ([ycor] of self) ) ]
				if (heading-specified = 180)[ set tile-expected-location ( list ([xcor] of self) (([ycor] of self) - 1) ) ]
				if (heading-specified = 270)[ set tile-expected-location ( list (([xcor] of self) - 1) ([ycor] of self) ) ]
			]

			ask turtle 2 [
				set hider-expected-location (list (xcor) (ycor))
			]

			;===========;
			;== TESTS ==;
			;===========;

			ask turtle 0 [
				check-equal 
					(push-tile (heading-specified)) 
					( list (true) (false) ) 
					("when checking the output of the 'push-tile' procedure")

				check-equal
					(score)
					(0)
					("when checking the 'score' of the 'pusher'")
			]

			check-equal 
				( 
					([xcor] of turtle 0) = (item (0) (pusher-expected-location)) and 
					([ycor] of turtle 0) = (item (1) (pusher-expected-location)) 
				) 
				(true)
				("when checking the location of the 'pusher'")

			check-equal 
				( 
					([xcor] of turtle 1) = (item (0) (tile-expected-location)) and 
					([ycor] of turtle 1) = (item (1) (tile-expected-location)) 
				)
				(true) 
				("when checking the location of the tile")

			check-equal 
				( 
					([xcor] of turtle 2) = (item (0) (hider-expected-location)) and 
					([ycor] of turtle 2) = (item (1) (hider-expected-location)) 
				)
				(true) 
				("when checking the location of the 'hider'")

			reset (true)
		]
	]
</test>