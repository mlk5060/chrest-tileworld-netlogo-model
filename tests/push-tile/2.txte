;Given a situation where:
;
; - A turtle calls the 'push-tile' procedure and each value in the global 'movement-headings' variable is passed.
; - There is a tile adjacent to the turtle along the heading specified.
;
;This tests to see if the following conditions are true:
; 
; - The 'push-tile' procedure reports boolean 'true' for each heading specified with respect to whether the action was performed 
;   successfully.
; - The 'push-tile' procedure reports boolean 'false' for each heading specified with respect to whether a hole was filled.
; - The calling turtle is located on the patch that is 1 patch from its original location along the heading specified.
; - The tile is located 1 patch along from its original location along the heading specified.

<test>
	create-chrest-turtles 1
	let chrest-turtle-new-patch 0
	let tile-new-patch 0

	foreach(movement-headings)[

		if(? = 0)[
			create-tiles 1 [ setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) + 1 ) ]
		]

		if(? = 90)[
			create-tiles 1 [ setxy ( ([pxcor] of turtle 0) + 1 ) ( ([pycor] of turtle 0) ) ]
		]

		if(? = 180)[
			create-tiles 1 [ setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) - 1 ) ]
		]

		if(? = 270)[
			create-tiles 1 [ setxy ( ([pxcor] of turtle 0) - 1 ) ( ([pycor] of turtle 0) ) ]
		]
		
		ask turtle 0 [
			set chrest-turtle-new-patch (patch-at-heading-and-distance (?) (1))
		]

		ask tiles [
			set tile-new-patch (patch-at-heading-and-distance (?) (1))
		]

		ask turtle 0 [
			check-equal (push-tile (?)) ( list (true) (false) )
			check-equal (patch-here) (chrest-turtle-new-patch)
		]

		ask tiles[
			check-equal (patch-here) (tile-new-patch) 
			die
		]
	]
</test>