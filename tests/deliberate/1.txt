;Determines if pattern-recognition is implemented correctly.  A CHREST turtle learns a visual and action chunk, associates and reinforces 
;them, then proceeds to deliberate about what to do when the visual pattern learned is encountered.  Note that the action pattern created 
;is nonsense given the scene.  This allows for an unambiguous check to be made for pattern-recognition? being used rather than problem 
;solving (which the CHREST turtle is capable of using).

<run>create-chrest-turtles 1</run>

reward-value
1.0

action-performance-time
0:10000

action-selection-procedure
0:roulette-selection

add-link-time
0:10000

discount-rate
0:0.5

discrimination-time
0:10000

familiarisation-time
0:2000

visual-spatial-field-access-time
0:100

visual-spatial-field-empty-square-placement-time
0:10

visual-spatial-field-object-movement-time
0:50

visual-spatial-field-object-placement-time
0:25

visual-spatial-field-recognised-object-lifespan
0:10000

visual-spatial-field-unrecognised-object-lifespan
0:50000

number-fixations
0:4

pattern-recognition?
0:true

play-time
0:14400000.0

reinforce-actions?
0:true

reinforce-problem-solving?
0:true

reinforcement-learning-theory
0:profit_sharing_with_discount_rate

sight-radius
0:2

time-taken-to-use-pattern-recognition
0:200

time-taken-to-problem-solve
0:1000


<test>
	ask turtle 0 [

		let time 0

		let vision []
		let xcoord -2
		let ycoord -2

		while[ycoord <= 2][
			while[xcoord <= 2][
				let item-identifier (chrest:get-empty-square-identifier-in-scene)
				if(xcoord = 0 and ycoord = 0)[
					set item-identifier (chrest:get-self-identifier-in-scene)
				]

				if(xcoord = 0 and ycoord = 1)[
					set item-identifier (tile-token)
				]
				set vision (lput (chrest:create-item-square-pattern (item-identifier) (xcoord) (ycoord)) (vision))
				set xcoord (xcoord + 1)
			]
			set xcoord (-2)
			set ycoord (ycoord + 1)
		]

		let visual-chunk ( chrest:create-list-pattern ("visual") (vision) )
		let action-chunk ( chrest:create-list-pattern ("action") (list chrest:create-item-square-pattern (push-tile-token) (180) (1)) )

		let result-of-chrest-recognising-visual-chunk ( 
			chrest:get-list-pattern-as-string (
				chrest:get-node-image (
					chrest:recognise-and-learn-list-pattern (chrest:normalise-list-pattern-using-domain-specifics(visual-chunk)) (time)
				)
			)
		)
		while[ result-of-chrest-recognising-visual-chunk != (chrest:get-list-pattern-as-string (chrest:normalise-list-pattern-using-domain-specifics (visual-chunk)) ) ][
			set time (time + 1000)
			set result-of-chrest-recognising-visual-chunk ( 
				chrest:get-list-pattern-as-string (
					chrest:get-node-image (
						chrest:recognise-and-learn-list-pattern (chrest:normalise-list-pattern-using-domain-specifics(visual-chunk)) (time)
					)
				)
			)
		]

		let result-of-chrest-recognising-action-chunk ( 
			chrest:get-list-pattern-as-string (
				chrest:get-node-image (
					chrest:recognise-and-learn-list-pattern (action-chunk) (time)
				)
			)
		)
		while[ result-of-chrest-recognising-action-chunk != ( chrest:get-list-pattern-as-string (action-chunk) ) ][
			set time (time + 1000)
			set result-of-chrest-recognising-action-chunk ( 
				chrest:get-list-pattern-as-string (
					chrest:get-node-image (
						chrest:recognise-and-learn-list-pattern (action-chunk) (time)
					)
				)
			)
		]

		while[ (chrest:get-ltm-modality-num-action-links ("visual")) = 0 ][
			chrest:associate-list-patterns (chrest:normalise-list-pattern-using-domain-specifics(visual-chunk)) (action-chunk) (time)
			set time (time + 1000)
		]

		chrest:reinforce-action-link (chrest:normalise-list-pattern-using-domain-specifics(visual-chunk)) (action-chunk) (list (reward-value) (discount-rate) (time) (time)) (time)

		let deliberation-result (deliberate (chrest:create-scene(visual-chunk) ("")))
		let action-decided-on ( item (0) (deliberation-result) )
		let time-taken-to-deliberate ( item (1) (deliberation-result) )
		let pattern-recognition-used? ( item (2) (deliberation-result) )
		
		check-equal (chrest:get-item-square-pattern-as-string (action-decided-on)) (chrest:get-item-square-pattern-as-string (item (0) ((chrest:get-list-pattern-as-netlogo-list(action-chunk)))))
		check-equal (time-taken-to-deliberate) (time-taken-to-use-pattern-recognition)
		check-equal (pattern-recognition-used?) (true)
	]
</test>