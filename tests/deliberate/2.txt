;Determines if viusally-informed problem-solving? is implemented correctly.  A CHREST turtle encounters a visual-pattern with only one
;possible action-pattern as a solution and deliberates on what to do.  The turtle can use pattern-recognition? but has no information
;in LTM to make use of so it should fall back on problem-solving?.

<run>create-chrest-turtles 1</run>

reward-value
1.0

action-performance-time
0:10000

action-selection-procedure
0:roulette-selection

add-link-time
0:10000

discount-rate
0:0.5

depth-of-search
0:5

discrimination-time
0:10000

familiarisation-time
0:2000

pattern-recognition?
0:true

play-time
0:14400000.0

problem-solving?
0:true

reinforce-actions?
0:true

reinforce-problem-solving?
0:true

reinforcement-learning-theory
0:profit_sharing_with_discount_rate

sight-radius
0:2

time-taken-to-use-pattern-recognition
0:200

time-taken-to-problem-solve
0:1000

visually-informed-problem-solving?
0:true

<test>
	ask turtle 0 [

		let time 0
	
		let scene ( list 
			(";-2;2") (";-1;2") (";0;2") (";1;2") (";2;2")
			(";-2;1") (";-1;1") (word tile-token ";0;1") (";1;1") (";2;1")
			(";-2;0") (";-1;0") (word self-token ";0;0") (";1;0") (";2;0")
			(";-2;-1") (";-1;-1") (";0;-1") (";1;-1") (";2;-1")
			(";-2;-2") (";-1;-2") (";0;-2") (";1;-2") (";2;-2")
		)
		
		let visual-chunk (generate-visual-chunk-from-scene(scene))
		let action-pattern ( chrest:create-item-square-pattern (push-tile-token) (0) (1) )

		let result (deliberate (scene))
		let action-pattern-returned ( item (0) (result) )
		let time-taken ( item (1) (result) )
		let pattern-recognition?-used? ( item (2) (result) )
		
		check-equal (action-pattern-returned) (action-pattern)
		check-equal (time-taken) (time-taken-to-problem-solve)
		check-equal (pattern-recognition?-used?) (false)
	]
</test>