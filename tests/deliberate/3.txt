;==============================
;========== TEST AIM ==========
;==============================
;
; 1) To determine if deliberation produces an expected action when the calling turtle uses problem solving and is guaranteed to not see
;    a tile given the state of the observable environment.
;
;======================================
;========== TEST DESCRIPTION ==========
;======================================
;
; 1) A CHREST turtle is created and its environment is populated with empty squares and every other object in the model except a tile (will ensure that
;    no object causes a false positive with regards to "seeing" a tile).
; 2) The CHREST turtle passes its observable environment as a Scene to the "deliberate" function and stores the result.
;
; The observable environment state of the CHREST turtle is depicted visually below.  Each object is denoted by its "who" number followed by the 
; class of the object in parenthesis.
;
; LEGEND
; ======
;
; - H: hole
; - O: opponent
; - T: tile
; - S: self
;        
; |------|------|------|
; | 8(O) | 1(H) | 2(O) |
; |------|------|------|
; |      | 0(S) |      |
; |------|------|------|
; | 6(O) | 5(H) | 4(O) |
; |------|------|------|
;                                        
;=====================================
;========== TESTS PERFORMED ==========
;=====================================
;
; The result of the "deliberation" procedure is checked to see if it is as expected:
; - The first item should be an expected action.  Given that no tiles can be seen, a "move" action with any cardinal compass heading.
; - The second item should be the time taken to deliberate, i.e. the time defined for the CHREST turtle to use problem-solving.
; - The third item should be equal to false, i.e. the turtle used problem-solving to generate the action reported.
<test>
	repeat 50 [
		
		create-chrest-turtles 1[
			set action-performance-time (10000)
			set action-selection-procedure ("roulette-selection")
			set add-link-time (10000)
			set can-plan? (true)
			set discount-rate (0.5)
			set discrimination-time (10000)
			set familiarisation-time (2000)
			set max-length-of-episodic-memory (5)
			set max-search-iteration (5)
			set number-fixations (4)
			set pattern-recognition? (true)
			set play-time (14400000.0)
			set reinforce-actions? (true)
			set reinforce-problem-solving? (true)
			set reinforcement-learning-theory ("profit_sharing_with_discount_rate")
			set sight-radius (1)
			set time-taken-to-use-pattern-recognition (200)
			set time-taken-to-problem-solve (1000)
			set visual-spatial-field-access-time (50)
			set visual-spatial-field-empty-square-placement-time (5)
			set visual-spatial-field-object-movement-time (25)
			set visual-spatial-field-object-placement-time (10)
			set visual-spatial-field-recognised-object-lifespan (100000)
			set visual-spatial-field-unrecognised-object-lifespan (90000)
		]
		setup (true)

		create-holes 1 [setxy ([pxcor] of turtle 0) (([pycor] of turtle 0) + 1)]
		create-chrest-turtles 1 [setxy (([pxcor] of turtle 0) + 1) (([pycor] of turtle 0) + 1)]
		create-chrest-turtles 1 [setxy (([pxcor] of turtle 0) + 1) (([pycor] of turtle 0) - 1)]
		create-holes 1 [setxy ([pxcor] of turtle 0) (([pycor] of turtle 0) - 1)]
		create-chrest-turtles 1 [setxy (([pxcor] of turtle 0) - 1) (([pycor] of turtle 0) - 1)]
		create-chrest-turtles 1 [setxy (([pxcor] of turtle 0) - 1) (([pycor] of turtle 0) + 1)]

		ask turtle 0 [

			let deliberation-result ( deliberate (get-observable-environment) )
			let expected-actions (list
				(list (move-token) (0) (1))
				(list (move-token) (90) (1))
				(list (move-token) (180) (1))
				(list (move-token) (270) (1))
			)

			check-equal 
				(member? (item (0) (deliberation-result)) (expected-actions)) 
				(true) 
				("when checking action reported")
				
			check-equal (item (1) (deliberation-result)) (time-taken-to-problem-solve) ("when checking time taken to deliberate")
			check-equal item (2) (deliberation-result) (false) ("when checking if pattern recognition used")
		]
		reset (true)
	]
</test>