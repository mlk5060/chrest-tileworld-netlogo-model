;Checks that the deliberation process returns the correct information when a CHREST turtle incapable of using pattern-recognition? but 
;incapable of using visually-informed problem-solving? deliberates on a visual scene.  Note that it is not possible to determine an exact 
;value for the time taken to complete deliberation since the turtle will randomly select a procedure to run if the procedure selected
;is not applicable given the current state of the environment.

<run>create-chrest-turtles 1</run>

reward-value
1.0

action-performance-time
0:10000

action-selection-procedure
0:roulette-selection

add-link-time
0:10000

discount-rate
0:0.5

discrimination-time
0:10000

familiarisation-time
0:2000

pattern-recognition?
0:false

play-time
0:14400000.0

problem-solving?
0:true

reinforce-actions?
0:false

reinforce-problem-solving?
0:false

reinforcement-learning-theory
0:profit_sharing_with_discount_rate

sight-radius
0:2

time-taken-to-use-pattern-recognition
0:0

time-taken-to-problem-solve
0:1000

visually-informed-problem-solving?
0:false

<test>
	ask turtle 0 [
	
		let scene ( list 
			(";-2;2") (";-1;2") (";0;2") (";1;2") (";2;2")
			(";-2;1") (";-1;1") (word tile-token ";0;1") (";1;1") (";2;1")
			(";-2;0") (word chrest-turtle-token ";-1;0") (word self-token ";0;0") (word chrest-turtle-token ";1;0") (";2;0")
			(";-2;-1") (";-1;-1") (word chrest-turtle-token ";0;-1") (";1;-1") (";2;-1")
			(";-2;-2") (";-1;-2") (";0;-2") (";1;-2") (";2;-2")
		)
		
		repeat 10[
			let result (deliberate (scene))
			let action-pattern-returned ( item (0) (result) )
			let time-taken ( item (1) (result) )
			let pattern-recognition?-used? ( item (2) (result) )
		
			check-equal (action-pattern-returned) (chrest:create-item-square-pattern (push-tile-token) (0) (1))
			check-greater-than-or-equal-to (time-taken) (time-taken-to-problem-solve + time-taken-to-act-randomly)
			check-equal (pattern-recognition?-used?) (false)
		]
	]
</test>