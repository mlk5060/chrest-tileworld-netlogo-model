;Determines if problem-solving is implemented correctly:
; - A CHREST turtle deliberates on a scene where a single tile can be seen in each compass direction
; - The CHREST turtle can use pattern-recognition but has no LTM info to make use of it so should use problem-solving

<run>create-chrest-turtles 1</run>

reward-value
1.0

action-performance-time
0:10000

action-selection-procedure
0:roulette-selection

add-link-time
0:10000

discount-rate
0:0.5

discrimination-time
0:10000

familiarisation-time
0:2000

minds-eye-access-time
0:100

minds-eye-empty-square-placement-time
0:10

minds-eye-object-movement-time
0:50

minds-eye-object-placement-time
0:25

minds-eye-recognised-object-lifespan
0:10000

minds-eye-unrecognised-object-lifespan
0:50000

number-fixations
0:4

pattern-recognition?
0:true

play-time
0:14400000.0

reinforce-actions?
0:true

reinforce-problem-solving?
0:true

reinforcement-learning-theory
0:profit_sharing_with_discount_rate

sight-radius
0:2

time-taken-to-use-pattern-recognition
0:200

time-taken-to-problem-solve
0:1000

<test>
	ask turtle 0 [

		let time 0

		let tile-xcor -2
		let tile-ycor -2

		while[tile-ycor <= 2][
			while[tile-xcor <= 2][

				let vision []
				let xcoord -2
				let ycoord -2

				while[ycoord <= 2][
					while[xcoord <= 2][

						let item-identifier (chrest:get-empty-square-identifier-in-scene)

						ifelse(xcoord = 0 and ycoord = 0)[
							set item-identifier (chrest:get-self-identifier-in-scene)
						]
						[
							if( (xcoord = tile-xcor) and (tile-ycor = ycoord) )[
								set item-identifier (tile-token)
							]
						]
						set vision (lput (chrest:create-item-square-pattern (item-identifier) (xcoord) (ycoord)) (vision))
						set xcoord (xcoord + 1)
					]
					set xcoord (-2)
					set ycoord (ycoord + 1)
				]

				if(not (tile-xcor = 0 and tile-ycor = 0) )[
					
					let scene (chrest:create-scene (chrest:create-list-pattern ("visual") (vision)) (""))

					let actions-expected []

					if( 
						(tile-xcor = -2 and tile-ycor = -2) or 
						(tile-xcor = -1 and tile-ycor = -2) or
						(tile-xcor = -2 and tile-ycor = -1) or 
						(tile-xcor = -1 and tile-ycor = -1)
					)[
						set actions-expected (lput (chrest:create-item-square-pattern (move-to-tile-token) (180) (1)) (actions-expected) )
						set actions-expected (lput (chrest:create-item-square-pattern (move-to-tile-token) (270) (1)) (actions-expected) )
					]

					if( 
						(tile-xcor = 1 and tile-ycor = -2) or 
						(tile-xcor = 2 and tile-ycor = -2) or
						(tile-xcor = 1 and tile-ycor = -1) or 
						(tile-xcor = 2 and tile-ycor = -1)
					)[
						set actions-expected (lput (chrest:create-item-square-pattern (move-to-tile-token) (90) (1)) (actions-expected) )
						set actions-expected (lput (chrest:create-item-square-pattern (move-to-tile-token) (180) (1)) (actions-expected) )
					]

					if( 
						(tile-xcor = -2 and tile-ycor = 1) or 
						(tile-xcor = -1 and tile-ycor = 1) or
						(tile-xcor = -2 and tile-ycor = 2) or 
						(tile-xcor = -1 and tile-ycor = 2)
					)[
						set actions-expected (lput (chrest:create-item-square-pattern (move-to-tile-token) (0) (1)) (actions-expected) )
						set actions-expected (lput (chrest:create-item-square-pattern (move-to-tile-token) (270) (1)) (actions-expected) )
					]

					if( 
						(tile-xcor = 1 and tile-ycor = 1) or 
						(tile-xcor = 2 and tile-ycor = 1) or
						(tile-xcor = 1 and tile-ycor = 2) or 
						(tile-xcor = 2 and tile-ycor = 2)
					)[
						set actions-expected (lput (chrest:create-item-square-pattern (move-to-tile-token) (0) (1)) (actions-expected) )
						set actions-expected (lput (chrest:create-item-square-pattern (move-to-tile-token) (90) (1)) (actions-expected) )
					]

					if(tile-xcor = 0 and tile-ycor = -2)[
						set actions-expected (lput (chrest:create-item-square-pattern (move-to-tile-token) (180) (1)) (actions-expected) )
					]

					if(tile-xcor = -2 and tile-ycor = 0)[
						set actions-expected (lput (chrest:create-item-square-pattern (move-to-tile-token) (270) (1)) (actions-expected) )
					]

					if(tile-xcor = 2 and tile-ycor = 0)[
						set actions-expected (lput (chrest:create-item-square-pattern (move-to-tile-token) (90) (1)) (actions-expected) )
					]

					if(tile-xcor = 0 and tile-ycor = 2)[
						set actions-expected (lput (chrest:create-item-square-pattern (move-to-tile-token) (0) (1)) (actions-expected) )
					]

					if(tile-xcor = 0 and tile-ycor = -1)[
						set actions-expected (lput (chrest:create-item-square-pattern (move-around-tile-token) (90) (1)) (actions-expected) )
						set actions-expected (lput (chrest:create-item-square-pattern (move-around-tile-token) (270) (1)) (actions-expected) )
						set actions-expected (lput (chrest:create-item-square-pattern (push-tile-token) (180) (1)) (actions-expected) )
					]

					if(tile-xcor = -1 and tile-ycor = 0)[
						set actions-expected (lput (chrest:create-item-square-pattern (move-around-tile-token) (0) (1)) (actions-expected) )
						set actions-expected (lput (chrest:create-item-square-pattern (move-around-tile-token) (180) (1)) (actions-expected) )
						set actions-expected (lput (chrest:create-item-square-pattern (push-tile-token) (270) (1)) (actions-expected) )
					]

					if(tile-xcor = 1 and tile-ycor = 0)[
						set actions-expected (lput (chrest:create-item-square-pattern (move-around-tile-token) (0) (1)) (actions-expected) )
						set actions-expected (lput (chrest:create-item-square-pattern (move-around-tile-token) (180) (1)) (actions-expected) )
						set actions-expected (lput (chrest:create-item-square-pattern (push-tile-token) (90) (1)) (actions-expected) )
					]

					if(tile-xcor = 0 and tile-ycor = 1)[
						set actions-expected (lput (chrest:create-item-square-pattern (move-around-tile-token) (90) (1)) (actions-expected) )
						set actions-expected (lput (chrest:create-item-square-pattern (move-around-tile-token) (270) (1)) (actions-expected) )
						set actions-expected (lput (chrest:create-item-square-pattern (push-tile-token) (0) (1)) (actions-expected) )
					]


					set actions-expected (map ([chrest:get-item-square-pattern-as-string (?)]) (actions-expected))
					let result (deliberate (scene))
					let action-returned (item (0) (result))
					let time-taken ( item (1) (result) )
					let pattern-recognition-used? ( item (2) (result) )

					while[ chrest:get-item-from-item-square-pattern (action-returned) = move-token ][
						set result (deliberate (scene))
						set action-returned (item (0) (result))
						set time-taken ( item (1) (result) )
						set pattern-recognition-used? ( item (2) (result) )
					]

					
					
					check-test-output (chrest:get-item-square-pattern-as-string (action-returned)) (actions-expected)
					check-equal (time-taken) (time-taken-to-problem-solve)
					check-equal (pattern-recognition-used?) (false)
				]

				set tile-xcor (tile-xcor + 1)
			]

			set tile-xcor (-2)
			set tile-ycor (tile-ycor + 1)
		]
	]
</test>