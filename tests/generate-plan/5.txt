;==============================
;========== TEST AIM ==========
;==============================
;
; 1) To determine if plan generation correctly proceeds until a CHREST 
;    turtle reaches its maximum search iteration limit.
;
;======================================
;========== TEST DESCRIPTION ==========
;======================================
;
; A CHREST turtle repeatedly invokes "generate-plan" when its 
; VisualSpatialField avatar is completely surrounded by immoveable 
; VisualSpatialFieldObjects.
;
; The only valid visual-spatial field state is depicted visually below.  
; Each object is denoted by its "who" number followed by the class of 
; the object in parenthesis.
;
; LEGEND
; ======
;
; - H: hole
; - O: opponent
; - T: tile
; - S: self
;        
;   |------|------|------|------|------|
; 4 |      |      | 2(T) |      |      |
;   |------|------|------|------|------|
; 3 |      |      | 1(T) |      |      |
;   |------|------|------|------|------|
; 2 |      | 5(H) | 0(S) | 3(H) |      |
;   |------|------|------|------|------|
; 1 |      |      | 4(O) |      |      |
;   |------|------|------|------|------|
; 0 |      |      |      |      |      |
;   |------|------|------|------|------|
;       0      1      2      3      4
;                                        
;=====================================
;========== TESTS PERFORMED ==========
;=====================================
;
; See code.
;
<test>
	repeat 10 [

		let time-to-make-fixation (1)

		create-chrest-turtles 1 [

			;Set variables that affect test
			set can-plan? (true)
			set can-use-pattern-recognition? (false)
			set initial-fixation-threshold (2)
			set max-fixations-in-set (5)
			set max-search-iteration (5)
			set peripheral-item-fixation-max-attempts (3)
			set probability-of-using-problem-solving (1.0)
			set saccade-time (1)
			set sight-radius (2)
			set time-taken-to-decide-upon-ahead-of-agent-fixations (time-to-make-fixation)
			set time-taken-to-decide-upon-movement-fixations (time-to-make-fixation)
			set time-taken-to-decide-upon-peripheral-item-fixations (time-to-make-fixation)
			set time-taken-to-decide-upon-peripheral-square-fixations (time-to-make-fixation)
			set time-taken-to-decide-upon-salient-object-fixations (time-to-make-fixation)
			set time-to-access-visual-spatial-field (1)
			set time-to-generate-action-when-no-tile-seen (1)
			set time-to-generate-action-when-tile-seen (1)
			set time-to-move-visual-spatial-field-object (1)
			set time-to-retrieve-fixation-from-perceiver (1)

			;Set variables that have to be set but have no bearing on the test
			set add-production-time (10000)
			set discount-rate (0.5)
			set discrimination-time (10000)
			set familiarisation-time (2000)
			set play-time (14400000.0)
			set reinforcement-learning-theory ("profit_sharing_with_discount_rate")
			set time-to-retrieve-item-from-stm (1)
			set time-to-encode-recognised-scene-object-as-visual-spatial-field-object (1)
			set time-to-encode-unrecognised-empty-square-scene-object-as-visual-spatial-field-object (1)
			set time-to-encode-unrecognised-non-empty-square-scene-object-as-visual-spatial-field-object (1)
			set time-to-process-unrecognised-scene-object-during-visual-spatial-field-construction (1)
			set unknown-visual-spatial-field-object-replacement-probabilities (list (list (1.0) (empty-patch-token)))
			set recognised-visual-spatial-field-object-lifespan (10000000)
			set unrecognised-visual-spatial-field-object-lifespan (10000000)

		]
		setup (true)

		let expected-visual-spatial-field []

		set expected-visual-spatial-field (list
			(list
				(list (list (empty-patch-token)))
				(list (list (empty-patch-token)))
				(list (list (empty-patch-token)))
				(list (list (empty-patch-token)))
				(list (list (empty-patch-token)))
			)
			(list
				(list (list (empty-patch-token)))
				(list (list (empty-patch-token)))
				(list (list ("5") (hole-token)))
				(list (list (empty-patch-token)))
				(list (list (empty-patch-token)))
			)
			(list
				(list (list (empty-patch-token)))
				(list (list ("4") (opponent-token)))
				(list (list ("0") (self-token)))
				(list (list ("1") (tile-token)))
				(list (list ("2") (tile-token)))
			)
			( list
				(list (list (empty-patch-token)))
				(list (list (empty-patch-token)))
				(list (list ("3") (hole-token)))
				(list (list (empty-patch-token)))
				(list (list (empty-patch-token)))
			)
			( list
				(list (list (empty-patch-token)))
				(list (list (empty-patch-token)))
				(list (list (empty-patch-token)))
				(list (list (empty-patch-token)))
				(list (list (empty-patch-token)))
			)
		)

		ask turtle 0 [

			;=================================;
			;== SET-UP VISUAL-SPATIAL FIELD ==;
			;=================================;

			chrest:TileworldModelTests#generate-plan.test-5

			;==========================;
			;== SET TURTLE VARIABLES ==;
			;==========================;

			set generate-plan? (false)
			set execute-actions? (false)
			set fixate-on-visual-spatial-field? (true)

			;==================================================================;
			;== CHECK THAT INITIAL VISUAL-SPATIAL FIELD STATE IS AS EXPECTED ==;
			;==================================================================;

			let most-recent-visual-spatial-field (chrest:Scene.get-as-netlogo-list 
				(chrest:get-visual-spatial-field-as-scene 
					(report-current-time) 
					(unknown-visual-spatial-field-object-replacement-probabilities) 
				)
			)

			let col (0)
			let row (0)
			let most-recent-vsf []
			foreach (most-recent-visual-spatial-field)[

				let row-list []
				foreach(?)[
					
					let object-info (item (0) (?))

					let object-details []
					ifelse(chrest:SceneObject.get-object-type (object-info) = empty-patch-token)[
						set object-details (lput 
							(list 
								(chrest:SceneObject.get-object-type (object-info))
							) 
							(object-details)
						)
					]
					[
						set object-details (lput 
							(list 
								(chrest:SceneObject.get-identifier (object-info))
								(chrest:SceneObject.get-object-type (object-info))
							) 
							(object-details)
						)
					]

					set row-list (lput (object-details) (row-list))
				]

				set most-recent-vsf (lput (row-list) (most-recent-vsf))
			]

			check-equal (most-recent-vsf) (expected-visual-spatial-field) ("occurred when checking initial visual-spatial field state")

			;=================================;
			;== SET EXPECTED TEST VARIABLES ==;
			;=================================;

			let expected-time-visual-spatial-field-can-be-used-for-planning (-1)
			let expected-episodic-memory-length (0)
			let expected-current-search-iteration (0)
			let expected-time-spent-deliberating (0)
			let expected-fixate-on-visual-spatial-field? (true)
			let expected-generate-plan? (false)
			let expected-deliberation-finished-time (0)
			let expected-execute-actions? (false)

			;===============================;
			;== PROCEDURE INVOCATION LOOP ==;
			;===============================;
			
			let test-search-iteration (0)
			while[ not execute-actions? ][

				;==========================================;
				;===== FIXATE ON VISUAL-SPATIAL FIELD =====;
				;==========================================;

				;Have the turtle fixate on its visual-spatial field until a fixation set is complete so that
				;it has information required to deliberate.
				if(fixate-on-visual-spatial-field?)[

					let visual-spatial-field (chrest:get-visual-spatial-field-as-scene (report-current-time) (unknown-visual-spatial-field-object-replacement-probabilities))
					
					if(chrest:schedule-or-make-next-fixation (visual-spatial-field) (false) (report-current-time) = chrest:ChrestStatus.value-of("FIXATION_SET_COMPLETE"))[
						
						;Turn off 'fixate-on-visual-spatial-field?' switch so that program control
						;doesn't come into this block again and turn on 'generate-plan?' as well as
						;setting the turtle's 'time-visual-spatial-field-can-be-used-for-planning'
						;variable so that 'generate-plan' proceeds as expected.

						set fixate-on-visual-spatial-field? (false)
						set expected-fixate-on-visual-spatial-field? (false)
						set generate-plan? (true)
						set expected-generate-plan? (true)
						set time-visual-spatial-field-can-be-used-for-planning (report-current-time)
						set expected-time-visual-spatial-field-can-be-used-for-planning (report-current-time)
					]
					
				]

				;======================================================;
				;== SET FLAG TO DENOTE IF PLAN GENERATION WILL OCCUR ==;
				;======================================================;

				let plan-generation-occurs? (generate-plan? and time-visual-spatial-field-can-be-used-for-planning = current-training-time)

				;======================;
				;== INVOKE PROCEDURE ==;
				;======================;

				generate-plan


				;===========================;
				;== POST-INVOCATION TESTS ==;
				;===========================;

				if(plan-generation-occurs?)[
					set expected-current-search-iteration (expected-current-search-iteration + 1)
					set expected-time-spent-deliberating ( expected-time-spent-deliberating + (chrest:get-attention-clock - current-training-time))
					set expected-fixate-on-visual-spatial-field? (true)
					set expected-generate-plan? (false)
					set test-search-iteration (test-search-iteration + 1)
				]

				if(test-search-iteration = max-search-iteration)[
					set expected-generate-plan? (false)
					set expected-current-search-iteration (0)
					set expected-fixate-on-visual-spatial-field? (false)
					set expected-deliberation-finished-time (chrest:get-attention-clock)
					set expected-execute-actions? (true)
				]

				let error-msg-prepend (word "occurred when checking the ")

				check-equal
					(time-visual-spatial-field-can-be-used-for-planning)
					(expected-time-visual-spatial-field-can-be-used-for-planning)
					(word error-msg-prepend "'time-visual-spatial-field-can-be-used-for-planning' variable")

				check-equal
					(fixate-on-visual-spatial-field?)
					(expected-fixate-on-visual-spatial-field?)
					(word error-msg-prepend "'fixate-on-visual-spatial-field?' variable")

				check-equal
					(generate-plan?)
					(expected-generate-plan?)
					(word error-msg-prepend "'generate-plan?' variable")

				check-equal
					(current-search-iteration)
					(expected-current-search-iteration)
					(word error-msg-prepend "'current-search-iteration' variable")

				check-equal
					(time-spent-deliberating)
					(expected-time-spent-deliberating)
					(word error-msg-prepend "'time-spent-deliberating' variable")

				check-equal
					(length episodic-memory)
					(expected-episodic-memory-length)
					(word error-msg-prepend "length of the 'episodic-memory' variable")

				check-equal
					(who-of-tile-last-pushed-in-plan)
					("")
					(word error-msg-prepend "'who-of-tile-last-pushed-in-plan' variable")

				check-equal
					(deliberation-finished-time)
					(expected-deliberation-finished-time)
					(word error-msg-prepend "'deliberation-finished-time' variable")

				check-equal
					(execute-actions?)
					(expected-execute-actions?)
					(word error-msg-prepend "'execute-actions?' variable")

				;==========================;
				;== INCREMENT MODEL TIME ==;
				;==========================;

				set current-training-time (current-training-time + 1)
			]

		]

		reset (true)
	]
</test>