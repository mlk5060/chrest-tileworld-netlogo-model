;Given the following situation:
;
; - A turtle intially generates a plan given a scene where a tile is north of the calling turtle's current location by 1 patch.
; - Continues plan generation after instantiation of the mind's eye has finished, pushing the tile and moving the turtle in the scene
;   1 patch north each.
; - Continues plan generation, pushing the tile and moving the turtle in the scene 1 patch north each until the tile is no longer
;   present in the minds eye.
; - Continues plan generation.
;
;This test ensures that the following conditions are true:
;
; - The 'generate-plan' turtle variable is set to 'false' since an end plan generation condition has been met (when the third 
;   'generate-plan' call is made, the last element in 'plan' is a 'push-tile' action indicating that a tile should be pushed north but
;   there is no tile on the patch adjacent to the calling turtle in the mind's eye to the north).
; - The length of the 'plan' turtle variable is 2 since since the minds eye has been instantiated when the second 'generate-plan' call 
;   is made (meaning there is information available to plan) and a third 'generate-plan' call is made (not interested in what the plan 
;   contains, this is validated in other tests).  The fourth call to 'generate-plan' should not result in an action being added to 'plan'.
; - The 'time-spent-deliberating-on-plan' turtle variable is set to 0 since an end plan condition has been met and this value will be reset
;   for the next plan generation cycle.
; - The 'deliberation-finished-time' is set to the sum of the current time and the value of 'time-taken-to-problem-solve' multiplied by 2 
;   since an end plan generation condition has been met, 2 'generate-plan' calls have been made that result in deliberation occurring and the 
;   turtle can not take advantage of pattern-recognition? in its deliberation process since it hasn't committed any patterns to its LTM.
; - The mind's eye of the turtle no longer exists since an end plan generation condition has been met.
; - Following the second 'generate-plan' call, the mind's eye content of the turtle is as expected (no other objects expect calling 
;   turtle since calling turtle and tile have moved two patches north of their initial location, tile is north of the calling turtle by 1 
;   patch but this patch is not represented in the mind's eye).

<run>create-chrest-turtles 1</run>

reward-value
1.0

action-performance-time
0:10000

action-selection-procedure
0:roulette-selection

add-link-time
0:10000

discount-rate
0:0.5

discrimination-time
0:10000

familiarisation-time
0:2000

minds-eye-access-time
0:250

minds-eye-lifespan
0:10000

minds-eye-object-movement-time
0:25

minds-eye-object-placement-time
0:50

pattern-recognition?
0:true

play-time
0:14400000.0

problem-solving?
0:true

reinforce-actions?
0:true

reinforce-problem-solving?
0:true

reinforcement-learning-theory
0:profit_sharing_with_discount_rate

sight-radius
0:2

time-taken-to-use-pattern-recognition
0:200

time-taken-to-problem-solve
0:1000


<test>
	create-tiles 1 [setxy ([pxcor] of turtle 0) ( ([pycor] of turtle 0) + 1) ]

	ask turtle 0 [
		generate-plan
	 	set current-training-time (current-training-time + (minds-eye-object-placement-time * 2))

		generate-plan
		set current-training-time (current-training-time + minds-eye-access-time + (minds-eye-object-movement-time * 2))

		generate-plan
		set current-training-time (current-training-time + minds-eye-access-time + (minds-eye-object-movement-time * 2))

		let expected-minds-eye-content (list
			(";-2;-2") (";-2;-1") (";-2;0") (";-2;1") (";-2;2")
			(";-1;-2") (";-1;-1") (";-1;0") (";-1;1") (";-1;2")
			(";0;-2") (";0;-1") (";0;0") (";0;1") (word self-token ";0;2")
			(";1;-2") (";1;-1") (";1;0") (";1;1") (";1;2")
			(";2;-2") (";2;-1") (";2;0") (";2;1") (";2;2")
		)
		check-equal (chrest:get-all-minds-eye-content (report-current-time )) (expected-minds-eye-content)

		generate-plan

		check-equal (generate-plan?) (false)
		check-equal (length (plan)) (2)
		check-equal (time-spent-deliberating-on-plan) (0)
		check-equal (deliberation-finished-time) (report-current-time + (time-taken-to-problem-solve * 2))
		check-equal (chrest:minds-eye-exist? (report-current-time)) (false)
	]
</test>