;==============================
;========== TEST AIM ==========
;==============================
;
; 1) To determine if setting of the "who-of-tile-last-pushed-in-plan" turtle variable is set correctly when multiple tiles can
;    be pushed without the visual-spatial field state being invalid.
;
;======================================
;========== TEST DESCRIPTION ==========
;======================================
;
; In previous 'generate-plan' tests, only 1 tile can be moved in a CHREST turtle's visual-spatial field without producing an invalid visual-spatial field
; state.  Thus, unless this tile is moved, the "who-of-tile-last-pushed-in-plan" turtle variable is always set to "" otherwise, it is set to the 'who' of
; the tile moved.  This test is designed to check for correct setting of the 'who-of-tile-last-pushed-in-plan' turtle variable when multiple tiles can be 
; pushed without producing an invalid visual-spatial field state resulting in a range of 'who-of-tile-last-pushed-in-plan' values.
;
; Essentially, if a CHREST turtle decides to push a tile after invoking "generate-plan", the 'who-of-tile-last-pushed-in-plan' should be set to the 'who'
; of the tile that the CHREST turtle decided to push.  Then, on the next invocation of "generate-plan", the CHREST turtle should use the value of 
; 'who-of-tile-last-pushed-in-plan' to determine if the tile's visual-spatial field object representation is no longer present in its visual-spatial field.
; This may be caused by the tile's visual-spatial field object representation having decayed by the time of the second "generate-plan" invocation or because
; the tile has been pushed out of the CHREST turtle's visual-spatial field (note that, if the tile has disappeared by the time of the second "generate-plan" 
; invocation, the Netlogo code does not seek to determine why this is).  Following this check, the 'who-of-tile-last-pushed-in-plan' is reset to "" regardless
; of whether the tile still exists in the visual-spatial field or not.  This means that the CHREST turtle only "fixates" on a tile until it knows that, after a
; planned move, it still exists in its visual-spatial field.  After this time, the CHREST turtle loses interest in it.
; 
; The test proceeds as follows:
;
; 1) A CHREST turtle is created and its observable environment is populated with moveable tiles.
; 2) The CHREST turtle invokes 'generate-plan' to construct its visual-spatial field.
; 3) The CHREST turtle continues to invoke 'generate-plan' until its 'generate-plan?' turtle variable is set to false.  A check is performed on the value
;    of the 'who-of-tile-last-pushed-in-plan' before each 'generate-plan' invocation in this loop to ensure that a previously pushed tile is remembered.
; 4) After the "generate-plan?" turtle variable is set to false, a check is again performed on the "who-of-tile-last-pushed-in-plan" turtle variable to 
;    ensure that it is set to false.
;
; NOTE: the CHREST turtle's maximum search iteration is set to a very high (unreachable) value so that plan generation doesn't end due to the search
;       iteration number check.
;
; The test is repeated 50 times to ensure that the CHREST turtle has plenty of opportunities to push more than 1 tile allowing for robust verification that
; setting 'who-of-tile-last-pushed-in-plan' works correctly.
;
; The observable environment state of the CHREST turtle is depicted visually below.  Each object is denoted by its "who" number followed by the 
; class of the object in parenthesis.
;
; LEGEND
; ======
;
; - T: tile
; - S: self
; 
;    
; |------|------|------|------|------|------|------|
; |      | 9(T) |      |      |      | 10(T)|      |
; |------|------|------|------|------|------|------|
; |      |      | 5(T) |      | 6(T) |      |      |
; |------|------|------|------|------|------|------|
; |      | 16(T)|      | 1(T) |      | 11(T)|      |
; |------|------|------|------|------|------|------|
; |      |      | 4(T) | 0(S) | 2(T) |      |      |
; |------|------|------|------|------|------|------|
; |      | 15(T)|      | 3(T) |      | 12(T)|      |
; |------|------|------|------|------|------|------|
; |      |      | 8(T) |      | 7(T) |      |      |
; |------|------|------|------|------|------|------|
; |      | 14(T)|      |      |      | 13(T)|      |
; |------|------|------|------|------|------|------|
;                                        
;=====================================
;========== TESTS PERFORMED ==========
;=====================================
;
; - Before every 'generate-plan' invocation the turtle's "who-of-tile-last-pushed-in-plan" turtle variable is checked.  If this is checked before the second 'generate-plan'
;   invocation (the first constructs the CHREST turtle's visual-spatial field) then this value is expected to be "" since no tiles should have been pushed yet.  Following
;   this, this value is expected to be what it was set to after the previous 'generate-plan' invocation.
; - When the turtle ceases to plan, the 'who-of-tile-last-pushed-in-plan' turtle variable is checked.  In this case, it should be set to "".
;
<test>
	

	repeat (50) [

		;=========================;
		;== SETUP CHREST TURTLE ==;
		;=========================;
		
		create-chrest-turtles 1[
			set action-performance-time 10000
			set action-selection-procedure "roulette-selection"
			set add-link-time 10000
			set can-plan? (true)
			set discount-rate 0.5
			set discrimination-time 10000
			set familiarisation-time 2000
			set max-length-of-episodic-memory 5
			set max-search-iteration 99999999
			set number-fixations 4
			set pattern-recognition? true
			set play-time 14400000.0
			set reinforce-actions? true
			set reinforce-problem-solving? true
			set reinforcement-learning-theory "profit_sharing_with_discount_rate" 
			set sight-radius 3
			set time-taken-to-use-pattern-recognition 200
			set time-taken-to-problem-solve 1000
			set visual-spatial-field-access-time 50
			set visual-spatial-field-empty-square-placement-time 5
			set visual-spatial-field-object-movement-time 25
			set visual-spatial-field-object-placement-time 10
			set visual-spatial-field-recognised-object-lifespan 20000
			set visual-spatial-field-unrecognised-object-lifespan 20000
		]
		setup (true)

		;=================;
		;== SETUP TILES ==;
		;=================;

		let tile-who-values []
		create-tiles 1 [setxy ([pxcor] of turtle 0) (([pycor] of turtle 0) + 1)]
		create-tiles 1 [setxy (([pxcor] of turtle 0) + 1) ([pycor] of turtle 0)]
		create-tiles 1 [setxy ([pxcor] of turtle 0) (([pycor] of turtle 0) - 1)]
		create-tiles 1 [setxy (([pxcor] of turtle 0) - 1) ([pycor] of turtle 0)]
		create-tiles 1 [setxy (([pxcor] of turtle 0) - 1) (([pycor] of turtle 0) + 2) ]
		create-tiles 1 [setxy (([pxcor] of turtle 0) + 1) (([pycor] of turtle 0) + 2) ]
		create-tiles 1 [setxy (([pxcor] of turtle 0) + 1) (([pycor] of turtle 0) - 2) ]
		create-tiles 1 [setxy (([pxcor] of turtle 0) - 1) (([pycor] of turtle 0) - 2) ]
		create-tiles 1 [setxy (([pxcor] of turtle 0) - 2) (([pycor] of turtle 0) + 3) ]
		create-tiles 1 [setxy (([pxcor] of turtle 0) + 2) (([pycor] of turtle 0) + 3) ]
		create-tiles 1 [setxy (([pxcor] of turtle 0) + 2) (([pycor] of turtle 0) + 1) ]
		create-tiles 1 [setxy (([pxcor] of turtle 0) + 2) (([pycor] of turtle 0) - 1) ]
		create-tiles 1 [setxy (([pxcor] of turtle 0) + 2) (([pycor] of turtle 0) - 3) ]
		create-tiles 1 [setxy (([pxcor] of turtle 0) - 2) (([pycor] of turtle 0) - 3) ]
		create-tiles 1 [setxy (([pxcor] of turtle 0) - 2) (([pycor] of turtle 0) - 1) ]
		create-tiles 1 [setxy (([pxcor] of turtle 0) - 2) (([pycor] of turtle 0) + 1) ]

		ask tiles [
			set tile-who-values (lput (who) (tile-who-values))
		]

		ask turtle 0 [

			;======================================;
			;== FIRST "GENERATE-PLAN" INVOCATION ==;
			;======================================;

			generate-plan

			;Increment domain time so that the next invocation of "generate-plan" will not be blocked due to the CHREST turtle's attention
			;not being free.
			set current-training-time (chrest:get-attention-clock)

			let expected-who-of-tile-last-pushed-in-plan ("")
			let plan-length (length plan)

			;=============================================;
			;== INTERMEDIATE "GENERATE-PLAN INVOCATION" ==;
			;=============================================;

			while[ generate-plan? ][

				check-equal 
					(who-of-tile-last-pushed-in-plan)
					(expected-who-of-tile-last-pushed-in-plan)
					("in main loop")

				generate-plan

				;Assume that the situation required for 'who-of-tile-last-pushed-in-plan' will not occur so the variable should be empty
				set expected-who-of-tile-last-pushed-in-plan ("")

				;===============================================================================;
				;== DETERMINE IF 'expected-who-of-tile-last-pushed-in-plan' SHOULD BE UPDATED ==;
				;===============================================================================;

				; At this point, 'generate-plan' will have deliberated on an action, performed it in the CHREST turtle's 
				; visual-spatial field and reversed the action if it resulted in an invalid visual-spatial field state or 
				; added the action to its plan if a valid visual-spatial field state was produced.  Thus, to determine if
				; the 'expected-who-of-tile-last-pushed-in-plan', some detective work is required.  So:
				;
				; 1. If the plan is longer than it was previously, a valid action has been planned; continue.
				; 2. If the new planned action is to push a tile then find out what heading the CHREST turtle should have
				;    adpoted to perform the move.  This will facilitate getting the who of the tile pushed to the 
				;    'expected-who-of-tile-last-pushed-in-plan' variable can be set correctly.
				; 3. Get the state of the CHREST turtle's visual-spatial field before the planned action is applied and use
				;    the information from step 2 in conjunction with the location of the CHREST turtle's avatar in the visual-
				;    spatial field to locate  the tile that should be pushed and get its 'who' value.
				; 4. Set the result of step 3 to 'expected-who-of-tile-last-pushed-in-plan'.

				let length-of-plan-after-invocation (length (plan))

				if(length-of-plan-after-invocation != plan-length)[
					set plan-length (length-of-plan-after-invocation)
					let last-planned-action (item (0) (last (plan)))

					if ( (chrest:ItemSquarePattern.get-item (last-planned-action)) = push-tile-token )[

						; Get the state of the visual-spatial field before the planned action occurs (the current time)
						let visual-spatial-field-before-planned-action-performed (chrest:VisualSpatialField.get-as-scene (current-training-time) (false))
						let location-of-creator (chrest:Scene.get-location-of-creator (visual-spatial-field-before-planned-action-performed))
						let location-of-pushed-tile []

						let heading-to-face-when-pushing (chrest:ItemSquarePattern.get-column (last-planned-action))
						if(heading-to-face-when-pushing = 0)[ set location-of-pushed-tile (list (item (0) (location-of-creator)) ((item (1) (location-of-creator)) + 1) ) ]
						if(heading-to-face-when-pushing = 90)[ set location-of-pushed-tile (list ((item (0) (location-of-creator)) + 1) (item (1) (location-of-creator)) ) ]
						if(heading-to-face-when-pushing = 180)[ set location-of-pushed-tile (list (item (0) (location-of-creator)) ((item (1) (location-of-creator)) - 1) ) ]
						if(heading-to-face-when-pushing = 270)[ set location-of-pushed-tile (list ((item (0) (location-of-creator)) - 1) (item (1) (location-of-creator)) ) ]

						set expected-who-of-tile-last-pushed-in-plan ( item 
							(0) 
							(chrest:Scene.get-square-contents-as-netlogo-list 
								(visual-spatial-field-before-planned-action-performed) 
								(item (0) (location-of-pushed-tile))
								(item (1) (location-of-pushed-tile))
							)
						)
					]
				]

				set current-training-time (chrest:get-attention-clock)
			]

			check-equal 
				(who-of-tile-last-pushed-in-plan)
				("")
				("after main testing loop")
		]
		reset (true)
	]
</test>