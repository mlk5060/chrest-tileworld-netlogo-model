;Given the following situation:
;
; - A turtle continues to generate a plan given a scene where it can only move west from its initial location and then west or east afterwards
;   since there are immoveable tiles blocking the tile to the north and south (turtle is also blocked to the east by immovable tiles from
;   its initial location) forming a channel.
;
;This test ensures that the following conditions are true:
;
; - The 'generate-plan' turtle variable is set to 'false' since an end plan generation condition has been met (due to the configuration
;   of tiles, the turtle will eventually no longer be able to see itself in its mind's eye).
; - The length of the 'plan' turtle variable is equal to the number of 'generate-plan' calls made that result in an action being added
;   to 'plan'.  When the turtle can no longer be seen in its mind's eye, the following call to 'generate-plan' should not result in an 
;   action being added to 'plan'.
; - The 'time-spent-deliberating-on-plan' turtle variable is set to 0 since an end plan condition has been met and this value will be reset
;   for the next plan generation cycle.
; - The 'deliberation-finished-time' is set to the sum of the current time and the value of 'time-taken-to-problem-solve' multiplied by the 
;   number of 'generate-plan' calls made that result in an action being added to 'plan'.  This is because an end plan generation condition 
;   has been met, multiple 'generate-plan' calls have been made that result in deliberation occurring and the turtle can not take advantage 
;   of pattern-recognition? in its deliberation process since it hasn't committed any patterns to its LTM.
; - The mind's eye of the turtle no longer exists since an end plan generation condition has been met.
; - Following the final 'generate-plan' call that results in an action being added to 'plan', the mind's eye content of the turtle is as 
;   expected (all tiles present but calling turtle not present).

<run>create-chrest-turtles 1</run>

reward-value
1.0

action-performance-time
0:10000

action-selection-procedure
0:roulette-selection

add-link-time
0:10000

discount-rate
0:0.5

discrimination-time
0:10000

familiarisation-time
0:2000

minds-eye-access-time
0:250

minds-eye-lifespan
0:10000

minds-eye-object-movement-time
0:25

minds-eye-object-placement-time
0:50

pattern-recognition?
0:true

play-time
0:14400000.0

problem-solving?
0:true

reinforce-actions?
0:true

reinforce-problem-solving?
0:true

reinforcement-learning-theory
0:profit_sharing_with_discount_rate

sight-radius
0:2

time-taken-to-use-pattern-recognition
0:200

time-taken-to-problem-solve
0:1000

visually-informed-problem-solving?
0:true

<test>
	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) + 1 ) ]
	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) + 2 ) ]
	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) + 1 ) ( ([pycor] of turtle 0) ) ]
	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) + 2 ) ( ([pycor] of turtle 0) ) ]
	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) - 1 ) ]
	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) ) ( ([pycor] of turtle 0) - 2 ) ]

	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) - 1 ) ( ([pycor] of turtle 0) + 1 ) ]
	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) - 1 ) ( ([pycor] of turtle 0) + 2 ) ]
	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) - 1 ) ( ([pycor] of turtle 0) - 1 ) ]
	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) - 1 ) ( ([pycor] of turtle 0) - 2 ) ]
	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) - 2 ) ( ([pycor] of turtle 0) + 1 ) ]
	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) - 2 ) ( ([pycor] of turtle 0) + 2 ) ]
	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) - 2 ) ( ([pycor] of turtle 0) - 1 ) ]
	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) - 2 ) ( ([pycor] of turtle 0) - 2 ) ]

	ask turtle 0 [
		generate-plan
	 	set current-training-time (current-training-time + minds-eye-object-placement-time * 15)

	 	let number-generate-plan-calls-resulting-in-action 0
	 	while[ ( get-location-of-self-in-scene(chrest:get-all-minds-eye-content(report-current-time)) ) != "" ][
	 		generate-plan
	 		set number-generate-plan-calls-resulting-in-action (number-generate-plan-calls-resulting-in-action + 1)
			set current-training-time (current-training-time + minds-eye-access-time + minds-eye-object-movement-time)
	 	]

	 	let expected-minds-eye-content (list
			(word tile-token ";-2;-2") (word tile-token ";-2;-1") (";-2;0") (word tile-token ";-2;1") (word tile-token ";-2;2")
			(word tile-token ";-1;-2") (word tile-token ";-1;-1") (";-1;0") (word tile-token ";-1;1") (word tile-token ";-1;2")
			(word tile-token ";0;-2") (word tile-token ";0;-1") (";0;0") (word tile-token ";0;1") (word tile-token ";0;2")
			(";1;-2") (";1;-1") (word tile-token ";1;0") (";1;1") (";1;2")
			(";2;-2") (";2;-1") (word tile-token ";2;0") (";2;1") (";2;2")
		)
		check-equal (chrest:get-all-minds-eye-content (report-current-time )) (expected-minds-eye-content)

	 	generate-plan

		check-equal (generate-plan?) (false)
		check-equal (length (plan)) (number-generate-plan-calls-resulting-in-action)
		check-equal (time-spent-deliberating-on-plan) (0)
		check-equal (deliberation-finished-time) (report-current-time + (time-taken-to-problem-solve * number-generate-plan-calls-resulting-in-action))
		check-equal (chrest:minds-eye-exist? (report-current-time)) (false)
	]
</test>