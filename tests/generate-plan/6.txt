;==============================
;========== TEST AIM ==========
;==============================
;
; 1) To determine if plan generation correctly proceeds and ends when the number of search iterations exceeds the maximum number specified.
; 2) To determine if variables are reset correctly following this end condition being recognised.
;
;======================================
;========== TEST DESCRIPTION ==========
;======================================
;
; 1) A CHREST turtle repeatedly invokes "generate-plan" when its attention is free and it is located in an environment where it is completely
;    surrounded by immoveable objects.  Due to the mechanism of the "deliberate" procedure that is used when plan generation actually occurs, 
;    the CHREST turtle will continue to plan, ad infinitum, unless plan generation is terminated by a check performed on the number of search
;    iterations performed.
; 2) After the CHREST turtle has exceeded the maximum number of search iterations and when its attention is free, the "generate-plan" procedure 
;    is invoked again.
;
; Since planned moves are determined and applied in the CHREST turtle's visual-spatial field by other procedures that are called by "generate-plan", 
; this test makes no attempt to determine if such procedures operate correctly.  Note also that it is not the responsibility of this test to determine 
; if invalid visual-spatial field states are identified as being invalid.  This is left to the tests for the procedure that handles this functionality.
;
; The only valid visual-spatial field state is depicted visually below.  Each object is denoted by its "who" number followed by the class of the object 
; in parenthesis.
;
; LEGEND
; ======
;
; - H: hole
; - O: opponent
; - T: tile
; - S: self
;        
; |------|------|------|------|------|
; |      |      | 2(T) |      |      |
; |------|------|------|------|------|
; |      |      | 1(T) |      |      |
; |------|------|------|------|------|
; |      | 5(H) | 0(S) | 3(H) |      |
; |------|------|------|------|------|
; |      |      | 4(O) |      |      |
; |------|------|------|------|------|
; |      |      |      |      |      |
; |------|------|------|------|------|
;                                        
;=====================================
;========== TESTS PERFORMED ==========
;=====================================
;
; Whilst plan generation is occuring, this test checks the following variables:
; 
; - "generate-plan?": this should remain set to true until the final visual-spatial field state is generated.
; - "plan" length: should always be set to 0 since any visual-spatial move sequence generated and performed in the visual-spatial field will result
;   in an invalid visual-spatial field state and will be reversed.  Consequently, the action used to generate the visual-spatial move sequence 
;   is not added to the turtle's plan.
; - "time-spent-deliberating-on-plan": should increase by the value specified for the "time-taken-to-problem-solve" turtle variable after every 
;   "generate-plan" invocation (the CHREST turtle never learns during this test so deliberation using pattern-recognition isn't possible).
; - "who-of-tile-last-pushed-in-plan": should always be set to "" since moving any tile in the visual-spatial field will result in an invalid 
;   visual-spatial field state and thus a reversal of the previous visual-spatial object move sequence (this variable is always reset to "" if a 
;   visual-spatial object move sequence is reversed.
; - "current-search-iteration": should increase by 1 for every "generate-plan" invocation after the initial one that constructs the visual-spatial field.
;
; After the maximum search iteration has been exceeded and a subsequent "generate-plan" invocation, the following variables are checked:
;
; - CHREST attention clock: should remain unchanged before and after the final "generate-plan" invocation is made since an "end-plan" condition should
;   be detected and therefore no visual-spatial field interaction should occur.
; - Visual-spatial field state: should remain unchanged (equal to the initial expected state) since an "end-plan" condition should be detected and therefore 
;   no visual-spatial field interaction should occur.
; - "generate-plan?": this should be set to 'false' since an "end plan" condition has been met.
; - "plan" length: should remain unchanged at 0 since an "end-plan" condition should be detected.
; - "time-spent-deliberating-on-plan": should be reset to 0 for the next planning cycle.
; - "deliberation-finished-time": should be set to the current domain time plus the value of the "time-spent-deliberating-on-plan" before it was
;   reset to 0.
; - "who-of-tile-last-pushed-in-plan": should be set to "" since this value needs to be reset for the next planning cycle.
; - "current-search-iteration": should be set to 0 since this value needs to be reset for the next planning cycle.
;
<test>
		repeat 50[
			create-chrest-turtles 1 [
				set action-performance-time 10000
				set action-selection-procedure "roulette-selection"
				set add-link-time 10000
				set can-plan? (true)
				set discount-rate 0.5
				set discrimination-time 10000
				set familiarisation-time 2000
				set max-length-of-episodic-memory 5
				set max-search-iteration 5
				set number-fixations 4
				set pattern-recognition? true
				set play-time 14400000.0
				set reinforce-actions? true
				set reinforce-problem-solving? true
				set reinforcement-learning-theory "profit_sharing_with_discount_rate" 
				set sight-radius 2
				set time-taken-to-use-pattern-recognition 200
				set time-taken-to-problem-solve 1000
				set visual-spatial-field-access-time 50
				set visual-spatial-field-empty-square-placement-time 5
				set visual-spatial-field-object-movement-time 25
				set visual-spatial-field-object-placement-time 10
				set visual-spatial-field-recognised-object-lifespan 100000
				set visual-spatial-field-unrecognised-object-lifespan 90000
			]
			setup (true)

			let expected-visual-spatial-field []
			
			create-tiles 1 [ setxy ([pxcor] of turtle 0) (([pycor] of turtle 0) + 1) ]
			create-tiles 1 [ setxy ([pxcor] of turtle 0) (([pycor] of turtle 0) + 2) ]
			create-holes 1 [ setxy (([pxcor] of turtle 0) + 1) ([pycor] of turtle 0) ]
			create-chrest-turtles 1 [ setxy ([pxcor] of turtle 0) (([pycor] of turtle 0) - 1) ]
			create-holes 1 [ setxy (([pxcor] of turtle 0) - 1) ([pycor] of turtle 0) ]

			set expected-visual-spatial-field (list
				(list
					(list (list (empty-patch-token) (empty-patch-token)))
					(list (list (empty-patch-token) (empty-patch-token)))
					(list (list (empty-patch-token) (empty-patch-token)))
					(list (list (empty-patch-token) (empty-patch-token)))
					(list (list (empty-patch-token) (empty-patch-token)))
				)
				(list
					(list (list (empty-patch-token) (empty-patch-token)))
					(list (list (empty-patch-token) (empty-patch-token)))
					(list (list ("5") (hole-token)))
					(list (list (empty-patch-token) (empty-patch-token)))
					(list (list (empty-patch-token) (empty-patch-token)))
				)
				(list
					(list (list (empty-patch-token) (empty-patch-token)))
					(list (list ("4") (opponent-token)))
					(list (list ("0") (self-token)))
					(list (list ("1") (tile-token)))
					(list (list ("2") (tile-token)))
				)
				( list
					(list (list (empty-patch-token) (empty-patch-token)))
					(list (list (empty-patch-token) (empty-patch-token)))
					(list (list ("3") (hole-token)))
					(list (list (empty-patch-token) (empty-patch-token)))
					(list (list (empty-patch-token) (empty-patch-token)))
				)
				( list
					(list (list (empty-patch-token) (empty-patch-token)))
					(list (list (empty-patch-token) (empty-patch-token)))
					(list (list (empty-patch-token) (empty-patch-token)))
					(list (list (empty-patch-token) (empty-patch-token)))
					(list (list (empty-patch-token) (empty-patch-token)))
				)
			)

			ask turtle 0 [

				;======================================;
				;== FIRST "GENERATE-PLAN" INVOCATION ==;
				;======================================;

				generate-plan

				;Increment domain time so that the next invocation of "generate-plan" will not be blocked due to the CHREST turtle's attention
				;not being free.
				set current-training-time (chrest:get-attention-clock)

				let expected-deliberation-time 0
				let expected-current-search-iteration 0

				;=============================================;
				;== INTERMEDIATE "GENERATE-PLAN INVOCATION" ==;
				;=============================================;
				let test-description (" during the planning cycle")

				while[ expected-current-search-iteration <= max-search-iteration ][

					generate-plan

					set expected-current-search-iteration (expected-current-search-iteration + 1)
					set expected-deliberation-time (expected-deliberation-time + time-taken-to-problem-solve)

					check-equal (generate-plan?) (true) (word "when checking 'generate-plan?'" test-description)
					check-equal (length(plan)) (0) (word "when checking plan length" test-description)
					check-equal (time-spent-deliberating-on-plan) (expected-deliberation-time) (word "when checking 'time-spent-deliberating-on-plan'" test-description)
					check-equal (deliberation-finished-time) (0) (word "when checking 'deliberation-finished-time'" test-description)
					check-equal (who-of-tile-last-pushed-in-plan) ("") (word "when checking 'who-of-tile-last-pushed-in-plan'" test-description)
					check-equal (current-search-iteration) (expected-current-search-iteration) (word "when checking 'current-search-iteration'" test-description)

					set current-training-time (chrest:get-attention-clock)
				]

				;======================================;
				;== FINAL "GENERATE-PLAN" INVOCATION ==;
				;======================================;

				generate-plan
				
				set test-description (" after invoking 'generate-plan' when the end-plan condition has been met")

				check-equal (chrest:get-attention-clock) (report-current-time) (word "when checking CHREST's attention clock" test-description)
				check-equal (chrest:VisualSpatialField.get-as-netlogo-list (chrest:get-attention-clock) (false)) (expected-visual-spatial-field) (word "when checking the visual-spatial field state" test-description)
				check-equal (generate-plan?) (false) (word "when checking 'generate-plan?'" test-description)
				check-equal (length (plan)) (0) (word "when checking 'plan' length" test-description)
				check-equal (time-spent-deliberating-on-plan) (0) (word "when checking 'time-spent-deliberating-on-plan'" test-description)
				check-equal (deliberation-finished-time) (report-current-time + expected-deliberation-time) (word "when checking 'deliberation-finished-time'" test-description)
				check-equal (who-of-tile-last-pushed-in-plan) ("") (word "when checking 'who-of-tile-last-pushed-in-plan'" test-description)
				check-equal (current-search-iteration) (0) (word "when checking 'current-search-iteration'" test-description)
			]

			reset (true)
		]
</test>