;====================
;===== TEST AIM =====
;====================
;
; To determine if the "learn-action" procedure acts as expected
; given all possible scenarios.
;
;============================
;===== TEST DESCRIPTION =====
;============================
;
; The procedure's operation is governed by 3 variables:
; 
; 1. The action to learn.
; 2. Whether the action to learn was generated using 
;    pattern-recognition.
; 3. Whether the turtle invoking the procedure can use
;    pattern-recognition.
;
; This test is therefore run with all possible values for these
; variables and the action learned by a CHREST turtle is checked.
; 
; The scenarios tested are shown in the table below.  Note that 
; if a turtle can not use pattern-recognition, the action to learn 
; would never be generated using pattern-recognition so these 
; scenarios are not considered.
;
; |==========|===============|======================|========================|
; | SCENARIO | ACTION        | CAN TURTLE USE       | ACTION-GENERATED USING |
; |          |               | PATTERN-RECOGNITION? | PATTERN-RECOGNITION?   |
; |==========|===============|======================|========================|
; | 1        | Move          | Yes                  | Yes                    |
; | 2        |               |                      | No                     |
; | 3        |               | No                   | No                     |
; | 4        | Move-randomly | Yes                  | Yes                    |
; | 5        |               |                      | No                     |
; | 6        |               | No                   | No                     |
; | 7        | Push-tile     | Yes                  | Yes                    |
; | 8        |               |                      | No                     |
; | 9        |               | No                   | No                     |
; |----------|---------------|----------------------|------------------------|
;
; Each scenario is repeated 50 times after all possible actions 
; given the scenario have been learned once by the CHREST turtle.
;
;===========================
;===== EXPECTED OUTPUT =====
;===========================
;
; For scenarios 1 and 7, the CHREST turtle has a 50% chance of learning either
; the problem-solving action or the actual action to learn (move or push-tile).
; For all other scenarios, the problem-solving action should be learned.
; 
<test>

	;============================================;
	;== SET-UP SCENARIO LOOP CONTROL VARIABLES ==;
	;============================================;

	let scenarios-tested []
	let number-scenarios ( ((length (possible-actions)) * (2 ^ 2)) - (length (possible-actions)) )

	while[length scenarios-tested < number-scenarios][

		;=====================;
		;== SET-UP SCENARIO ==;
		;=====================;

		let action 										(one-of (possible-actions))
		let can-use-pattern-recognition? 				(one-of (list (true) (false)))
		let action-generated-using-pattern-recognition? (one-of (list (true) (false)))

		let scenario (list 
			action
			can-use-pattern-recognition?
			action-generated-using-pattern-recognition?
		)

		; If the scenario has already been tested or is an impossible scenario (see
		; test preamble), attempt to generate a new scenario.
		while[
			member? (scenario) (scenarios-tested) or 
			(not can-use-pattern-recognition?) and (action-generated-using-pattern-recognition?)
		][
			set action 										(one-of (possible-actions))
			set can-use-pattern-recognition? 				(one-of (list (true) (false)))
			set action-generated-using-pattern-recognition? (one-of (list (true) (false)))

			set scenario (list
				action
				can-use-pattern-recognition?
				action-generated-using-pattern-recognition?
			)
		]

		; Add the valid scenario to the list of those tested.
		set scenarios-tested (lput 
			(scenario)
			(scenarios-tested)
		)

		;=====================================;
		;== SET-UP REPEAT CONTROL VARIABLES ==;
		;=====================================;

		; Regardless of scenario, the problem-solving action should
		; always be learned.  If the current scenario is equal to 
		; 1 or 7, the explicit action needs to be learned.
		let problem-solving-action-learned? (false)
		let action-learned? (ifelse-value 
			(
				can-use-pattern-recognition? and
				action-generated-using-pattern-recognition? and
    			(action) != move-randomly-token
    		)
    		[false]
    		[true]
    	)

		let repeat-number 0
		while[repeat-number < 50][

			;==========================;
			;== SET-UP CHREST TURTLE ==;
			;==========================;

			create-chrest-turtles 1[
				set pattern-recognition? (can-use-pattern-recognition?)

				; None of these variables affect the procedure but need to be set.
				set can-plan? (false)
				set max-fixations-in-set (10)
				set initial-fixation-threshold (3)
				set peripheral-item-fixation-max-attempts (3)
				set reinforcement-learning-theory ("profit_sharing_with_discount_rate")
				set recognised-visual-spatial-field-object-lifespan (0)
				set time-to-access-visual-spatial-field (0)
				set time-to-encode-recognised-scene-object-as-visual-spatial-field-object (0)
				set time-to-encode-unrecognised-empty-square-scene-object-as-visual-spatial-field-object (0)
				set time-to-encode-unrecognised-non-empty-square-scene-object-as-visual-spatial-field-object (0)
				set time-to-move-visual-spatial-field-object (0)
				set time-to-process-unrecognised-scene-object-during-visual-spatial-field-construction (0)
				set unrecognised-visual-spatial-field-object-lifespan (0)
			]
			setup(true)
			
			;===============================;
			;== CONSTRUCT ACTION TO LEARN ==;
			;===============================;

			let action-to-learn (chrest:ItemSquarePattern.new (action) (180) (1))
			
			ask turtle 0[

				;======================;
				;== INVOKE PROCEDURE ==;
				;======================;

				learn-action (action-to-learn) (action-generated-using-pattern-recognition?)

				;========================;
				;== GET ACTION LEARNED ==;
				;========================;

				let actions-learned (chrest:TileworldModelTests#learn-action.test)

				;==================================;
				;== SET EXPECTED ACTIONS LEARNED ==;
				;==================================;

				let expected-actions-learned []

				; The problem-solving action should always be learned, regardless of
				; scenario.
				set expected-actions-learned (lput
					(
						chrest:ListPattern.get-as-string (
							chrest:ListPattern.new (
								list (chrest:ItemSquarePattern.new (problem-solving-token) (0) (0))
							) 
							(item (0) (chrest:Modality.get-modalities))
						)
					)
					(expected-actions-learned)
				)

				; If this is scenario 1 or 7, the explicit action can also be learned
				if(
					can-use-pattern-recognition? and
	    			action-generated-using-pattern-recognition? and
	    			(action) != move-randomly-token
	    		)[
	    			set expected-actions-learned (lput
						(
							chrest:ListPattern.get-as-string (
								chrest:ListPattern.new (
									list (chrest:ItemSquarePattern.new (action) (180) (1))
								) 
								(item (0) (chrest:Modality.get-modalities))
							)
						)
						(expected-actions-learned)
					)
	    		]

	    		;===========;
	    		;== TESTS ==;
	    		;===========;

				check-equal 
					(1) 
					(length actions-learned) 
					("when checking the number of actions learned")

				check-test-output
					(chrest:ListPattern.get-as-string (chrest:Node.get-contents (item (0) (actions-learned))))
					(expected-actions-learned) 
					("when checking the action learned")

				;====================================;
				;== ALTER REPEAT CONTROL VARIABLES ==;
				;====================================;

				let action-learned (chrest:Node.get-contents (item (0) (actions-learned)))
				set action-learned (chrest:ListPattern.get-as-netlogo-list (action-learned))
				set action-learned (item (0) (action-learned))
				set action-learned (chrest:ItemSquarePattern.get-item (action-learned))

				ifelse(action-learned = problem-solving-token)[
					set problem-solving-action-learned? (true)
				]
				[
					set action-learned? (true)
				]
			]
			reset (true)

			;=============================;
			;== INCREMENT REPEAT NUMBER ==;
			;=============================;

			if(problem-solving-action-learned? and action-learned?)
    		[
    			set repeat-number (repeat-number + 1)
    		]

		]
	]
</test>