;====================
;===== TEST AIM =====
;====================
;
; Checks if the correct moves are generated by the
; "generate-visual-spatial-field-moves" procedure when:
;
; - All possible headings that can be assigned to a 'push-tile'
;   action are specified.
; - The CHREST turtle's 'who-of-tile-last-pushed-in-plan' variable is empty.
; - A tile is located adjacent to the CHREST turtle along the heading specified
;   in the CHREST turtle's visual-spatial field.
; - The "reverse" parameter to the "generate-visual-spatial-field-moves"
;   procedure is set to true then to false.
;
;======================================
;========== TEST DESCRIPTION ==========
;====================================== 
; 
; A CHREST turtle is created and a visual-spatial field is instantiated for
; the turtle.  With regard to the visual-spatial field:
;
; 1. The CHREST turtle is represented.
; 2. A tile is represented.
;
; Depending upon the heading to use, the tile is placed relative to the CHREST
; turtle's avatar in its visual-spatial field so that a push/pull action for 
; the tile is created. For example, if the heading to use is 0 (north) a tile is
; created 1 square north of the CHREST turtle's avatar on its visual-spatial
; field.
;
;===========================
;===== EXPECTED OUTPUT ===== 
;=========================== 
; 
; A move should be generated for the CHREST turtle's visual-spatial field
; avatar and for the tile adjacent to the turtle so that the tile is pushed or
; pulled depending on whether the action is to be reversed or not.
;
; NOTE: when pushing a tile, the tile movements come before the CHREST
; turtle's if the action is not a reversal.  Conversely, if the action is a
; reversal, the CHREST turtle's movements come before the tile's.
; 
<test>
	foreach (movement-headings)[
		let heading-to-use (?)

		;==========================;
		;== CREATE CHREST TURTLE ==;
		;==========================;

		create-chrest-turtles 1 [
			;None of these variables affect the procedure but need to be set.
			set can-plan? (false)
			set max-fixations-in-set (10)
			set initial-fixation-threshold (3)
			set peripheral-item-fixation-max-attempts (3)
			set reinforcement-learning-theory ("profit_sharing_with_discount_rate")
			set recognised-visual-spatial-field-object-lifespan (0)
			set time-to-access-visual-spatial-field (0)
			set time-to-encode-recognised-scene-object-as-visual-spatial-field-object (0)
			set time-to-encode-unrecognised-empty-square-scene-object-as-visual-spatial-field-object (0)
			set time-to-encode-unrecognised-non-empty-square-scene-object-as-visual-spatial-field-object (0)
			set time-to-move-visual-spatial-field-object (0)
			set time-to-process-unrecognised-scene-object-during-visual-spatial-field-construction (0)
			set unrecognised-visual-spatial-field-object-lifespan (0)
		]
		setup (true)

		ask turtle 0 [

			;==============================================================;
			;== INSTANTIATE VISUAL-SPATIAL FIELD AND SET ATTENTION CLOCK ==;
			;==============================================================;

			chrest:TileworldModelTests#generate-visual-spatial-field-moves.test-2 (heading-to-use)

			;=================================================================================;
			;== INVOKE 'generate-visual-spatial-field-moves' AND PREPARE OUTPUT FOR TESTING ==;
			;=================================================================================;

			let action-to-perform (chrest:ItemSquarePattern.new (push-tile-token) (heading-to-use) (1))

			let non-reversal (generate-visual-spatial-field-moves (action-to-perform) (false))
			set non-reversal (map ([map ([ chrest:ItemSquarePattern.get-as-string (?) ]) (?)]) (non-reversal))

			let reversal (generate-visual-spatial-field-moves (action-to-perform) (true))
			set reversal (map ([map ([ chrest:ItemSquarePattern.get-as-string (?) ]) (?)]) (reversal))

			;=========================;
			;== SET EXPECTED VALUES ==;
			;=========================;

			let self-start-point (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (2) (2)))
			let self-move-to-non-reversal ""
			let self-move-to-reversal ""

			let tile-start-point ""
			let tile-move-to-non-reversal ""
			let tile-move-to-reversal ""

			if(heading-to-use = 0)[
				set self-move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (2) (3)))
				set self-move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (2) (1)))

				set tile-start-point (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (2) (3)))
				set tile-move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (2) (4)))
				set tile-move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (2) (2)))
			]

			if(heading-to-use = 90)[
				set self-move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (3) (2)))
				set self-move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (1) (2)))

				set tile-start-point (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (3) (2)))
				set tile-move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (4) (2)))
				set tile-move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (2) (2)))
			]

			if(heading-to-use = 180)[
				set self-move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (2) (1)))
				set self-move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (2) (3)))

				set tile-start-point (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (2) (1)))
				set tile-move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (2) (0)))
				set tile-move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (2) (2)))
			]

			if(heading-to-use = 270)[
				set self-move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (1) (2)))
				set self-move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (3) (2)))

				set tile-start-point (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (1) (2)))
				set tile-move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (0) (2)))
				set tile-move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (2) (2)))
			]
			
			;===========;
			;== TESTS ==;
			;===========;

			check-equal 
				(non-reversal)
				( 
					(list
						(list 
							(tile-start-point)
							(tile-move-to-non-reversal)
						)
						(list 
							(self-start-point)
							(self-move-to-non-reversal)
						)
					) 
				)
				("occured when checking the output for a non-reversal 'push-tile' action")

			check-equal 
				(reversal)
				( 
					(list 
						(list 
							(self-start-point)
							(self-move-to-reversal)
						)
						(list 
							(tile-start-point)
							(tile-move-to-reversal)
						)
					) 
				)
				("occured when checking the output for a reversal 'push-tile' action")
		]

		reset (true)
	]
</test>