;==============================
;========== TEST AIM ==========
;==============================
; 
; Tests whether all headings that can be assigned to the "push-tile" action have the correct moves generated 
; by the "generate-visual-spatial-field-moves" procedure when the procedure is asked to create a non-reversal 
; and reversal variant of a move.
;
;======================================
;========== TEST DESCRIPTION ==========
;======================================
;
; The test proceeds by a CHREST turtle being created that has a sight-radius of 1 so 9 patches can be
; seen in total by it.  Depending upon the current heading of the action to use, a tile is also created
; in the correct location so that the CHREST turtle can push it in its visual-spatial field.  So, if the
; heading of the action should be 0 (north) a tile is created on the patch immediately north of the turtle.
; The CHREST turtle's observable environment is then retrieved and this information is used to instantiate 
; the CHREST turtle's visual-spatial field so that moves can be generated correctly.
;
; The action to pass to the "generate-visual-spatial-field-moves" procedure is then created and passed
; to the procedure in two invocations: the first requests a standard visual-spatial field move to be
; generated given the action, the second requests a reversal of the action.
;
; NOTE: the moves generated are not actually applied in the CHREST turtle's visual-spatial field.
;
;=====================================
;========== TESTS PERFORMED ==========
;=====================================
;
; After each invocation of the "generate-visual-spatial-field-moves" procedure, the output generated is
; stored and prepared for use by the testing procedure so that the output generated can actually be 
; tested meaningfully (jchrest.lib.ItemSquarePattern instances are converted to their String representations).
; This prepared information is then checked to see if it is as expected.
;
; NOTE: when pushing a tile, the tile movements come before the calling CHREST turtle's if the action is a 
;       non-reversal.  For a reversal variant of the move, the calling CHREST turtle's movements come before
;       the tiles.  This ensures that neither object co-habit the same visual-spatial field square at any 
;       point.
;
<test>

	let headings (list (0) (90) (180) (270))
	foreach (headings)[
		let heading-to-use (?)

		;==========================;
		;== CREATE CHREST TURTLE ==;
		;==========================;

		create-chrest-turtles 1 [
			set action-performance-time (10000)
			set action-selection-procedure ("roulette-selection")
			set add-link-time (10000)
			set discount-rate (0.5)
			set discrimination-time (10000)
			set familiarisation-time (2000)
			set max-length-of-episodic-memory (5)
			set max-search-iteration (5)
			set number-fixations (4)
			set pattern-recognition? (true)
			set play-time (14400000.0)
			set reinforce-actions? (true)
			set reinforce-problem-solving? (true)
			set reinforcement-learning-theory ("profit_sharing_with_discount_rate")
			set sight-radius (1)
			set time-taken-to-use-pattern-recognition (200)
			set time-taken-to-problem-solve (1000)
			set visual-spatial-field-access-time (100)
			set visual-spatial-field-empty-square-placement-time (10)
			set visual-spatial-field-object-movement-time (50)
			set visual-spatial-field-object-placement-time (25)
			set visual-spatial-field-recognised-object-lifespan (10000)
			set visual-spatial-field-unrecognised-object-lifespan (50000)
		]
		setup (true)

		;=================;
		;== CREATE TILE ==;
		;=================;

		create-tiles 1 [
			if(heading-to-use = 0)[
				setxy ([pxcor] of turtle 0) (([pycor] of turtle 0) + 1)
			]

			if(heading-to-use = 90)[
				setxy (([pxcor] of turtle 0) + 1) ([pycor] of turtle 0)
			]

			if(heading-to-use = 180)[
				setxy ([pxcor] of turtle 0) (([pycor] of turtle 0) - 1)
			]

			if(heading-to-use = 270)[
				setxy (([pxcor] of turtle 0) - 1) ([pycor] of turtle 0)
			]
		]

		ask turtle 0 [

			;===========================================;
			;== CREATE SCENE FOR VISUAL-SPATIAL FIELD ==;
			;===========================================;

			let scene-to-encode-in-visual-spatial-field (get-observable-environment)
			set scene-to-encode-in-visual-spatial-field (chrest:Scene.new (scene-to-encode-in-visual-spatial-field) (""))

			;=================================;
			;== CREATE VISUAL-SPATIAL FIELD ==;
			;=================================;

			chrest:VisualSpatialField.new
				(scene-to-encode-in-visual-spatial-field)
				(visual-spatial-field-object-placement-time)
				(visual-spatial-field-empty-square-placement-time)
				(visual-spatial-field-access-time)
				(visual-spatial-field-object-movement-time)
				(visual-spatial-field-recognised-object-lifespan)
				(visual-spatial-field-unrecognised-object-lifespan)
				(number-fixations)
				(report-current-time)
				(false)
				(false)

			;=================================================================================;
			;== INVOKE 'generate-visual-spatial-field-moves' AND PREPARE OUTPUT FOR TESTING ==;
			;=================================================================================;

			;Skip time ahead to when visual-spatial field instantiation finishes.
			set current-training-time (chrest:get-attention-clock)
			
			let action-to-perform (chrest:ItemSquarePattern.new (push-tile-token) (heading-to-use) (1))

			let non-reversal (generate-visual-spatial-field-moves (action-to-perform) (false))
			set non-reversal (map ([map ([ chrest:ItemSquarePattern.get-as-string (?) ]) (?)]) (non-reversal))

			let reversal (generate-visual-spatial-field-moves (action-to-perform) (true))
			set reversal (map ([map ([ chrest:ItemSquarePattern.get-as-string (?) ]) (?)]) (reversal))

			;=========================;
			;== SET EXPECTED VALUES ==;
			;=========================;

			let self-start-point (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (2) (2)))
			let self-move-to-non-reversal ""
			let self-move-to-reversal ""

			let tile-start-point ""
			let tile-move-to-non-reversal ""
			let tile-move-to-reversal ""

			if(heading-to-use = 0)[
				set self-move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (2) (3)))
				set self-move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (2) (1)))

				set tile-start-point (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (2) (3)))
				set tile-move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (2) (4)))
				set tile-move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (2) (2)))
			]

			if(heading-to-use = 90)[
				set self-move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (3) (2)))
				set self-move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (1) (2)))

				set tile-start-point (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (3) (2)))
				set tile-move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (4) (2)))
				set tile-move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (2) (2)))
			]

			if(heading-to-use = 180)[
				set self-move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (2) (1)))
				set self-move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (2) (3)))

				set tile-start-point (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (2) (1)))
				set tile-move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (2) (0)))
				set tile-move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (2) (2)))
			]

			if(heading-to-use = 270)[
				set self-move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (1) (2)))
				set self-move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (3) (2)))

				set tile-start-point (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (1) (2)))
				set tile-move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (0) (2)))
				set tile-move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new ("1") (2) (2)))
			]
			
			;===========;
			;== TESTS ==;
			;===========;

			check-equal 
				(non-reversal)
				( 
					(list
						(list 
							(tile-start-point)
							(tile-move-to-non-reversal)
						)
						(list 
							(self-start-point)
							(self-move-to-non-reversal)
						)
					) 
				)
				("occured when checking the output for a non-reversal 'push-tile' action")

			check-equal 
				(reversal)
				( 
					(list 
						(list 
							(self-start-point)
							(self-move-to-reversal)
						)
						(list 
							(tile-start-point)
							(tile-move-to-reversal)
						)
					) 
				)
				("occured when checking the output for a reversal 'push-tile' action")
		]

		reset (true)
	]
</test>