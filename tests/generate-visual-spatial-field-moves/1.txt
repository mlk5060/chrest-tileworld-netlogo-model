;==============================
;========== TEST AIM ==========
;==============================
; 
; Tests whether all headings that can be assigned to actions that simply move the calling turtle have
; the correct moves generated by the "generate-visual-spatial-field-moves" procedure when the procedure
; is asked to create a non-reversal and reversal variant of a move.
;
;======================================
;========== TEST DESCRIPTION ==========
;======================================
;
; The test proceeds by a CHREST turtle being created that has a sight-radius of 1 so 9 patches can be
; seen in total by it.  Its observable environment is then retrieved and this information is used to
; instantiate the CHREST turtle's visual-spatial field so that moves can be generated.
;
; The action to pass to the "generate-visual-spatial-field-moves" procedure is then created and passed
; to the procedure in two invocations: the first requests a standard visual-spatial field move to be
; generated given the action, the second requests a reversal of the action.
;
; NOTE: the moves generated are not actually applied in the CHREST turtle's visual-spatial field.
;
;=====================================
;========== TESTS PERFORMED ==========
;=====================================
;
; After each invocation of the "generate-visual-spatial-field-moves" procedure, the output generated is
; stored and prepared for use by the testing procedure so that the output generated can actually be 
; tested meaningfully (jchrest.lib.ItemSquarePattern instances are converted to their String representations).
; This prepared information is then checked to see if it is as expected.
;
<test>
	foreach(possible-actions)[
		let action (?)

		if( action != push-tile-token )[

			let headings (list (0) (90) (180) (270))
			foreach (headings)[
				let heading-to-use (?)

				;==========================;
				;== CREATE CHREST TURTLE ==;
				;==========================;

				create-chrest-turtles 1 [
					set action-performance-time (10000)
					set action-selection-procedure ("roulette-selection")
					set add-link-time (10000)
					set can-plan? (true)
					set discount-rate (0.5)
					set discrimination-time (10000)
					set familiarisation-time (2000)
					set max-length-of-episodic-memory (5)
					set max-search-iteration (5)
					set number-fixations (4)
					set pattern-recognition? (true)
					set play-time (14400000.0)
					set reinforce-actions? (true)
					set reinforce-problem-solving? (true)
					set reinforcement-learning-theory ("profit_sharing_with_discount_rate")
					set sight-radius (1)
					set time-taken-to-use-pattern-recognition (200)
					set time-taken-to-problem-solve (1000)
					set visual-spatial-field-access-time (100)
					set visual-spatial-field-empty-square-placement-time (10)
					set visual-spatial-field-object-movement-time (50)
					set visual-spatial-field-object-placement-time (25)
					set visual-spatial-field-recognised-object-lifespan (10000)
					set visual-spatial-field-unrecognised-object-lifespan (50000)
				]
				setup (true)

				ask turtle 0 [

					;===========================================;
					;== CREATE SCENE FOR VISUAL-SPATIAL FIELD ==;
					;===========================================;

					let scene-to-encode-in-visual-spatial-field (get-observable-environment)
					set scene-to-encode-in-visual-spatial-field (chrest:Scene.new (scene-to-encode-in-visual-spatial-field) (""))

					;=================================;
					;== CREATE VISUAL-SPATIAL FIELD ==;
					;=================================;

					chrest:VisualSpatialField.new
						(scene-to-encode-in-visual-spatial-field)
						(visual-spatial-field-object-placement-time)
						(visual-spatial-field-empty-square-placement-time)
						(visual-spatial-field-access-time)
						(visual-spatial-field-object-movement-time)
						(visual-spatial-field-recognised-object-lifespan)
						(visual-spatial-field-unrecognised-object-lifespan)
						(number-fixations)
						(report-current-time)
						(false)
						(false)

					;=================================================================================;
					;== INVOKE 'generate-visual-spatial-field-moves' AND PREPARE OUTPUT FOR TESTING ==;
					;=================================================================================;

					;Skip time ahead to when visual-spatial field instantiation finishes.
					set current-training-time (chrest:get-attention-clock)
					
					let action-to-perform (chrest:ItemSquarePattern.new (action) (heading-to-use) (1))

					let non-reversal (generate-visual-spatial-field-moves (action-to-perform) (false))
					set non-reversal (map 
						([map 
							([ chrest:ItemSquarePattern.get-as-string (?) ])
						(?)]) 
						(non-reversal)
					)

					let reversal (generate-visual-spatial-field-moves (action-to-perform) (true))
					set reversal (map ([map ([ chrest:ItemSquarePattern.get-as-string (?) ]) (?)]) (reversal))

					;=========================;
					;== SET EXPECTED VALUES ==;
					;=========================;
			
					let start-point (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (1) (1)))
					let move-to-non-reversal ""
					let move-to-reversal ""

					if(heading-to-use = 0)[
						set move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (1) (2)))
						set move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (1) (0)))
					]

					if(heading-to-use = 90)[
						set move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (2) (1)))
						set move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (0) (1)))
					]

					if(heading-to-use = 180)[
						set move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (1) (0)))
						set move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (1) (2)))
					]

					if(heading-to-use = 270)[
						set move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (0) (1)))
						set move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (2) (1)))
					]
					
					;===========;
					;== TESTS ==;
					;===========;
					
					check-equal 
						(non-reversal)
						( 
							(list 
								(list 
									(start-point)
									(move-to-non-reversal)
								)
							) 
						)
						(word "occured when checking the output for a non-reversal '" action "' action")

					check-equal 
						(reversal)
						( 
							(list 
								(list 
									(start-point)
									(move-to-reversal)
								)
							) 
						)
						(word "occured when checking the output for a reversal '" action "' action")
				]

				reset (true)
			]
		]
	]
</test>