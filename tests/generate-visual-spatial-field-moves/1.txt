;==================== 
;===== TEST AIM ===== 
;==================== 
; 
; Checks if the correct moves are generated by the
; "generate-visual-spatial-field-moves" procedure when:
;
; - All possible headings that can be assigned to a non 'push-tile'
;   action are specified.
; - The "reverse" parameter to the "generate-visual-spatial-field-moves"
;   procedure is set to true then to false.
;
;============================= 
;===== TEST DESCRIPTION ======
;=============================
;
; Each action that only causes the turtle to move in the model's
; 'possible-actions' list is passed to the
; "generate-visual-spatial-field-moves" procedure along each heading defined in
; the model's 'movement-headings' list.
;
; For each action, the "generate-visual-spatial-field-moves" procedure that
; determined whether an action is to be reversed is first set to false then
; true.
;  
;===========================
;===== EXPECTED OUTPUT =====
;===========================
;
; A move should be generated for the CHREST turtle's visual-spatial field
; avatar.
;
<test>     
	foreach(possible-actions)[
		let action (?)

		if( action != push-tile-token )[

			foreach(movement-headings)[
				let heading-to-use (?)

				;==========================;
				;== CREATE CHREST TURTLE ==;
				;==========================;

				create-chrest-turtles 1 [

					;None of these variables affect the procedure but need to be set.
					set can-plan? (false)
					set max-fixations-in-set (10)
					set initial-fixation-threshold (3)
					set peripheral-item-fixation-max-attempts (3)
					set reinforcement-learning-theory ("profit_sharing_with_discount_rate")
					set recognised-visual-spatial-field-object-lifespan (0)
					set time-to-access-visual-spatial-field (0)
					set time-to-encode-recognised-scene-object-as-visual-spatial-field-object (0)
					set time-to-encode-unrecognised-empty-square-scene-object-as-visual-spatial-field-object (0)
					set time-to-encode-unrecognised-non-empty-square-scene-object-as-visual-spatial-field-object (0)
					set time-to-move-visual-spatial-field-object (0)
					set time-to-process-unrecognised-scene-object-during-visual-spatial-field-construction (0)
					set unrecognised-visual-spatial-field-object-lifespan (0)
				]
				setup (true)

				ask turtle 0 [
					
					;==============================================================;
					;== INSTANTIATE VISUAL-SPATIAL FIELD AND SET ATTENTION CLOCK ==;
					;==============================================================;

					chrest:TileworldModelTests#generate-visual-spatial-field-moves.test-1

					;=================================================================================;
					;== INVOKE 'generate-visual-spatial-field-moves' AND PREPARE OUTPUT FOR TESTING ==;
					;=================================================================================;
					
					let action-to-perform (chrest:ItemSquarePattern.new (action) (heading-to-use) (1))

					let non-reversal (generate-visual-spatial-field-moves (action-to-perform) (false))
					set non-reversal (map 
						([map 
							([ chrest:ItemSquarePattern.get-as-string (?) ])
						(?)]) 
						(non-reversal)
					)

					let reversal (generate-visual-spatial-field-moves (action-to-perform) (true))
					set reversal (map ([map ([ chrest:ItemSquarePattern.get-as-string (?) ]) (?)]) (reversal))

					;=========================;
					;== SET EXPECTED VALUES ==;
					;=========================;
			
					let start-point (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (2) (2)))
					let move-to-non-reversal ""
					let move-to-reversal ""

					if(heading-to-use = 0)[
						set move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (2) (3)))
						set move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (2) (1)))
					]

					if(heading-to-use = 90)[
						set move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (3) (2)))
						set move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (1) (2)))
					]

					if(heading-to-use = 180)[
						set move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (2) (1)))
						set move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (2) (3)))
					]

					if(heading-to-use = 270)[
						set move-to-non-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (1) (2)))
						set move-to-reversal (chrest:ItemSquarePattern.get-as-string (chrest:ItemSquarePattern.new (word who) (3) (2)))
					]
					
					;===========;
					;== TESTS ==;
					;===========;
					
					check-equal 
						(non-reversal)
						( 
							(list 
								(list 
									(start-point)
									(move-to-non-reversal)
								)
							) 
						)
						(word "occured when checking the output for a non-reversal '" action "' action")

					check-equal 
						(reversal)
						( 
							(list 
								(list 
									(start-point)
									(move-to-reversal)
								)
							) 
						)
						(word "occured when checking the output for a reversal '" action "' action")
				]

				reset (true)
			]
		]
	]
</test>