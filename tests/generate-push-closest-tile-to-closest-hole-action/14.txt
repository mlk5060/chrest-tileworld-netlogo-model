; Tests that the 'generate-push-closest-tile-to-closest-hole' procedure specifies the correct object to be actioned and
; a valid action pattern when the tile closest to the closest hole to the calling turtle is:
; - Adjacent to the calling turtle
; - East of the calling turtle
; - West of the closest hole
; - Obstructed to the east

<run>create-chrest-turtles 1</run>

tile-lifespan
500.0

hole-lifespan
500.0

tile-birth-prob
0.1

hole-birth-prob
0.1

reward-value
1.0

tile-born-every
1.0

hole-born-every
1.0

action-performance-time
0:1.0

action-selection-procedure
0:roulette-selection

add-link-time
0:10.0

discount-rate
0:0.5

discrimination-time
0:10.0

familiarisation-time
0:2.0

max-length-of-episodic-memory
0:30

minds-eye-access-time
0:100

minds-eye-lifespan
0:2500

minds-eye-object-movement-time
0:50

minds-eye-object-placement-time
0:25

pattern-recognition?
0:true

play-time
0:14400.0

problem-solving?
0:true

reinforce-actions?
0:true

reinforce-problem-solving?
0:true

reinforcement-learning-theory
0:profit_sharing_with_discount_rate

sight-radius
0:3

time-taken-to-act-randomly
0:0.5

time-taken-to-use-pattern-recognition
0:0.2

time-taken-to-problem-solve
0:1.0

training-time
0:0.0

visually-informed-problem-solving?
0:true

<test>
	create-tiles 1 [ setxy ( ([pxcor] of turtle 0) + 1) ( [pycor] of turtle 0 ) ]
	create-chrest-turtles 1 [ setxy ( ([pxcor] of turtle 0) + 2 ) ( [pycor] of turtle 0 ) ]
	create-holes 1 [ setxy ( ([pxcor] of turtle 0) + 3 ) ( [pycor] of turtle 0 ) ]

	ask turtle 0 [
		instantiate-minds-eye
		let scene ( chrest:get-all-minds-eye-content(1000) )
		let result ( deliberate (scene))		
		let action-pattern (item (0) (result))
		check-test-output (action-pattern) (chrest:create-item-square-pattern (remain-stationary-token) (0) (0))
	]
</test>